// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/mrzack99s/mrz-identity-management/ent/groupbandwidth"
	"github.com/mrzack99s/mrz-identity-management/ent/groups"
	"github.com/mrzack99s/mrz-identity-management/ent/predicate"
	"github.com/mrzack99s/mrz-identity-management/ent/users"
)

// GroupsUpdate is the builder for updating Groups entities.
type GroupsUpdate struct {
	config
	hooks    []Hook
	mutation *GroupsMutation
}

// Where appends a list predicates to the GroupsUpdate builder.
func (gu *GroupsUpdate) Where(ps ...predicate.Groups) *GroupsUpdate {
	gu.mutation.Where(ps...)
	return gu
}

// SetGName sets the "g_name" field.
func (gu *GroupsUpdate) SetGName(s string) *GroupsUpdate {
	gu.mutation.SetGName(s)
	return gu
}

// SetGIsIntOrg sets the "g_is_int_org" field.
func (gu *GroupsUpdate) SetGIsIntOrg(b bool) *GroupsUpdate {
	gu.mutation.SetGIsIntOrg(b)
	return gu
}

// SetNillableGIsIntOrg sets the "g_is_int_org" field if the given value is not nil.
func (gu *GroupsUpdate) SetNillableGIsIntOrg(b *bool) *GroupsUpdate {
	if b != nil {
		gu.SetGIsIntOrg(*b)
	}
	return gu
}

// SetGIsSuperAdmin sets the "g_is_super_admin" field.
func (gu *GroupsUpdate) SetGIsSuperAdmin(b bool) *GroupsUpdate {
	gu.mutation.SetGIsSuperAdmin(b)
	return gu
}

// SetNillableGIsSuperAdmin sets the "g_is_super_admin" field if the given value is not nil.
func (gu *GroupsUpdate) SetNillableGIsSuperAdmin(b *bool) *GroupsUpdate {
	if b != nil {
		gu.SetGIsSuperAdmin(*b)
	}
	return gu
}

// SetGCreatedAt sets the "g_created_at" field.
func (gu *GroupsUpdate) SetGCreatedAt(t time.Time) *GroupsUpdate {
	gu.mutation.SetGCreatedAt(t)
	return gu
}

// SetNillableGCreatedAt sets the "g_created_at" field if the given value is not nil.
func (gu *GroupsUpdate) SetNillableGCreatedAt(t *time.Time) *GroupsUpdate {
	if t != nil {
		gu.SetGCreatedAt(*t)
	}
	return gu
}

// ClearGCreatedAt clears the value of the "g_created_at" field.
func (gu *GroupsUpdate) ClearGCreatedAt() *GroupsUpdate {
	gu.mutation.ClearGCreatedAt()
	return gu
}

// SetUseBandwidthID sets the "use_bandwidth" edge to the GroupBandwidth entity by ID.
func (gu *GroupsUpdate) SetUseBandwidthID(id int) *GroupsUpdate {
	gu.mutation.SetUseBandwidthID(id)
	return gu
}

// SetNillableUseBandwidthID sets the "use_bandwidth" edge to the GroupBandwidth entity by ID if the given value is not nil.
func (gu *GroupsUpdate) SetNillableUseBandwidthID(id *int) *GroupsUpdate {
	if id != nil {
		gu = gu.SetUseBandwidthID(*id)
	}
	return gu
}

// SetUseBandwidth sets the "use_bandwidth" edge to the GroupBandwidth entity.
func (gu *GroupsUpdate) SetUseBandwidth(g *GroupBandwidth) *GroupsUpdate {
	return gu.SetUseBandwidthID(g.ID)
}

// AddUserIDs adds the "users" edge to the Users entity by IDs.
func (gu *GroupsUpdate) AddUserIDs(ids ...int) *GroupsUpdate {
	gu.mutation.AddUserIDs(ids...)
	return gu
}

// AddUsers adds the "users" edges to the Users entity.
func (gu *GroupsUpdate) AddUsers(u ...*Users) *GroupsUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return gu.AddUserIDs(ids...)
}

// Mutation returns the GroupsMutation object of the builder.
func (gu *GroupsUpdate) Mutation() *GroupsMutation {
	return gu.mutation
}

// ClearUseBandwidth clears the "use_bandwidth" edge to the GroupBandwidth entity.
func (gu *GroupsUpdate) ClearUseBandwidth() *GroupsUpdate {
	gu.mutation.ClearUseBandwidth()
	return gu
}

// ClearUsers clears all "users" edges to the Users entity.
func (gu *GroupsUpdate) ClearUsers() *GroupsUpdate {
	gu.mutation.ClearUsers()
	return gu
}

// RemoveUserIDs removes the "users" edge to Users entities by IDs.
func (gu *GroupsUpdate) RemoveUserIDs(ids ...int) *GroupsUpdate {
	gu.mutation.RemoveUserIDs(ids...)
	return gu
}

// RemoveUsers removes "users" edges to Users entities.
func (gu *GroupsUpdate) RemoveUsers(u ...*Users) *GroupsUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return gu.RemoveUserIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (gu *GroupsUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(gu.hooks) == 0 {
		if err = gu.check(); err != nil {
			return 0, err
		}
		affected, err = gu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GroupsMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = gu.check(); err != nil {
				return 0, err
			}
			gu.mutation = mutation
			affected, err = gu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(gu.hooks) - 1; i >= 0; i-- {
			if gu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = gu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, gu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (gu *GroupsUpdate) SaveX(ctx context.Context) int {
	affected, err := gu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (gu *GroupsUpdate) Exec(ctx context.Context) error {
	_, err := gu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gu *GroupsUpdate) ExecX(ctx context.Context) {
	if err := gu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gu *GroupsUpdate) check() error {
	if v, ok := gu.mutation.GName(); ok {
		if err := groups.GNameValidator(v); err != nil {
			return &ValidationError{Name: "g_name", err: fmt.Errorf("ent: validator failed for field \"g_name\": %w", err)}
		}
	}
	return nil
}

func (gu *GroupsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   groups.Table,
			Columns: groups.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: groups.FieldID,
			},
		},
	}
	if ps := gu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gu.mutation.GName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: groups.FieldGName,
		})
	}
	if value, ok := gu.mutation.GIsIntOrg(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: groups.FieldGIsIntOrg,
		})
	}
	if value, ok := gu.mutation.GIsSuperAdmin(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: groups.FieldGIsSuperAdmin,
		})
	}
	if value, ok := gu.mutation.GCreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: groups.FieldGCreatedAt,
		})
	}
	if gu.mutation.GCreatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: groups.FieldGCreatedAt,
		})
	}
	if gu.mutation.UseBandwidthCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   groups.UseBandwidthTable,
			Columns: []string{groups.UseBandwidthColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: groupbandwidth.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.UseBandwidthIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   groups.UseBandwidthTable,
			Columns: []string{groups.UseBandwidthColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: groupbandwidth.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if gu.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   groups.UsersTable,
			Columns: []string{groups.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: users.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.RemovedUsersIDs(); len(nodes) > 0 && !gu.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   groups.UsersTable,
			Columns: []string{groups.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: users.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   groups.UsersTable,
			Columns: []string{groups.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: users.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, gu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{groups.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// GroupsUpdateOne is the builder for updating a single Groups entity.
type GroupsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *GroupsMutation
}

// SetGName sets the "g_name" field.
func (guo *GroupsUpdateOne) SetGName(s string) *GroupsUpdateOne {
	guo.mutation.SetGName(s)
	return guo
}

// SetGIsIntOrg sets the "g_is_int_org" field.
func (guo *GroupsUpdateOne) SetGIsIntOrg(b bool) *GroupsUpdateOne {
	guo.mutation.SetGIsIntOrg(b)
	return guo
}

// SetNillableGIsIntOrg sets the "g_is_int_org" field if the given value is not nil.
func (guo *GroupsUpdateOne) SetNillableGIsIntOrg(b *bool) *GroupsUpdateOne {
	if b != nil {
		guo.SetGIsIntOrg(*b)
	}
	return guo
}

// SetGIsSuperAdmin sets the "g_is_super_admin" field.
func (guo *GroupsUpdateOne) SetGIsSuperAdmin(b bool) *GroupsUpdateOne {
	guo.mutation.SetGIsSuperAdmin(b)
	return guo
}

// SetNillableGIsSuperAdmin sets the "g_is_super_admin" field if the given value is not nil.
func (guo *GroupsUpdateOne) SetNillableGIsSuperAdmin(b *bool) *GroupsUpdateOne {
	if b != nil {
		guo.SetGIsSuperAdmin(*b)
	}
	return guo
}

// SetGCreatedAt sets the "g_created_at" field.
func (guo *GroupsUpdateOne) SetGCreatedAt(t time.Time) *GroupsUpdateOne {
	guo.mutation.SetGCreatedAt(t)
	return guo
}

// SetNillableGCreatedAt sets the "g_created_at" field if the given value is not nil.
func (guo *GroupsUpdateOne) SetNillableGCreatedAt(t *time.Time) *GroupsUpdateOne {
	if t != nil {
		guo.SetGCreatedAt(*t)
	}
	return guo
}

// ClearGCreatedAt clears the value of the "g_created_at" field.
func (guo *GroupsUpdateOne) ClearGCreatedAt() *GroupsUpdateOne {
	guo.mutation.ClearGCreatedAt()
	return guo
}

// SetUseBandwidthID sets the "use_bandwidth" edge to the GroupBandwidth entity by ID.
func (guo *GroupsUpdateOne) SetUseBandwidthID(id int) *GroupsUpdateOne {
	guo.mutation.SetUseBandwidthID(id)
	return guo
}

// SetNillableUseBandwidthID sets the "use_bandwidth" edge to the GroupBandwidth entity by ID if the given value is not nil.
func (guo *GroupsUpdateOne) SetNillableUseBandwidthID(id *int) *GroupsUpdateOne {
	if id != nil {
		guo = guo.SetUseBandwidthID(*id)
	}
	return guo
}

// SetUseBandwidth sets the "use_bandwidth" edge to the GroupBandwidth entity.
func (guo *GroupsUpdateOne) SetUseBandwidth(g *GroupBandwidth) *GroupsUpdateOne {
	return guo.SetUseBandwidthID(g.ID)
}

// AddUserIDs adds the "users" edge to the Users entity by IDs.
func (guo *GroupsUpdateOne) AddUserIDs(ids ...int) *GroupsUpdateOne {
	guo.mutation.AddUserIDs(ids...)
	return guo
}

// AddUsers adds the "users" edges to the Users entity.
func (guo *GroupsUpdateOne) AddUsers(u ...*Users) *GroupsUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return guo.AddUserIDs(ids...)
}

// Mutation returns the GroupsMutation object of the builder.
func (guo *GroupsUpdateOne) Mutation() *GroupsMutation {
	return guo.mutation
}

// ClearUseBandwidth clears the "use_bandwidth" edge to the GroupBandwidth entity.
func (guo *GroupsUpdateOne) ClearUseBandwidth() *GroupsUpdateOne {
	guo.mutation.ClearUseBandwidth()
	return guo
}

// ClearUsers clears all "users" edges to the Users entity.
func (guo *GroupsUpdateOne) ClearUsers() *GroupsUpdateOne {
	guo.mutation.ClearUsers()
	return guo
}

// RemoveUserIDs removes the "users" edge to Users entities by IDs.
func (guo *GroupsUpdateOne) RemoveUserIDs(ids ...int) *GroupsUpdateOne {
	guo.mutation.RemoveUserIDs(ids...)
	return guo
}

// RemoveUsers removes "users" edges to Users entities.
func (guo *GroupsUpdateOne) RemoveUsers(u ...*Users) *GroupsUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return guo.RemoveUserIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (guo *GroupsUpdateOne) Select(field string, fields ...string) *GroupsUpdateOne {
	guo.fields = append([]string{field}, fields...)
	return guo
}

// Save executes the query and returns the updated Groups entity.
func (guo *GroupsUpdateOne) Save(ctx context.Context) (*Groups, error) {
	var (
		err  error
		node *Groups
	)
	if len(guo.hooks) == 0 {
		if err = guo.check(); err != nil {
			return nil, err
		}
		node, err = guo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GroupsMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = guo.check(); err != nil {
				return nil, err
			}
			guo.mutation = mutation
			node, err = guo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(guo.hooks) - 1; i >= 0; i-- {
			if guo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = guo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, guo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (guo *GroupsUpdateOne) SaveX(ctx context.Context) *Groups {
	node, err := guo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (guo *GroupsUpdateOne) Exec(ctx context.Context) error {
	_, err := guo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (guo *GroupsUpdateOne) ExecX(ctx context.Context) {
	if err := guo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (guo *GroupsUpdateOne) check() error {
	if v, ok := guo.mutation.GName(); ok {
		if err := groups.GNameValidator(v); err != nil {
			return &ValidationError{Name: "g_name", err: fmt.Errorf("ent: validator failed for field \"g_name\": %w", err)}
		}
	}
	return nil
}

func (guo *GroupsUpdateOne) sqlSave(ctx context.Context) (_node *Groups, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   groups.Table,
			Columns: groups.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: groups.FieldID,
			},
		},
	}
	id, ok := guo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Groups.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := guo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, groups.FieldID)
		for _, f := range fields {
			if !groups.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != groups.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := guo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := guo.mutation.GName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: groups.FieldGName,
		})
	}
	if value, ok := guo.mutation.GIsIntOrg(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: groups.FieldGIsIntOrg,
		})
	}
	if value, ok := guo.mutation.GIsSuperAdmin(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: groups.FieldGIsSuperAdmin,
		})
	}
	if value, ok := guo.mutation.GCreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: groups.FieldGCreatedAt,
		})
	}
	if guo.mutation.GCreatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: groups.FieldGCreatedAt,
		})
	}
	if guo.mutation.UseBandwidthCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   groups.UseBandwidthTable,
			Columns: []string{groups.UseBandwidthColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: groupbandwidth.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.UseBandwidthIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   groups.UseBandwidthTable,
			Columns: []string{groups.UseBandwidthColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: groupbandwidth.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if guo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   groups.UsersTable,
			Columns: []string{groups.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: users.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.RemovedUsersIDs(); len(nodes) > 0 && !guo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   groups.UsersTable,
			Columns: []string{groups.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: users.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   groups.UsersTable,
			Columns: []string{groups.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: users.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Groups{config: guo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, guo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{groups.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
