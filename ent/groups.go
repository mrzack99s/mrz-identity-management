// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/mrzack99s/mrz-identity-management/ent/groupbandwidth"
	"github.com/mrzack99s/mrz-identity-management/ent/groups"
)

// Groups is the model entity for the Groups schema.
type Groups struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// GName holds the value of the "g_name" field.
	GName string `json:"g_name,omitempty"`
	// GIsIntOrg holds the value of the "g_is_int_org" field.
	GIsIntOrg bool `json:"g_is_int_org,omitempty"`
	// GIsSuperAdmin holds the value of the "g_is_super_admin" field.
	GIsSuperAdmin bool `json:"g_is_super_admin,omitempty"`
	// GCreatedAt holds the value of the "g_created_at" field.
	GCreatedAt time.Time `json:"g_created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the GroupsQuery when eager-loading is set.
	Edges                  GroupsEdges `json:"edges"`
	group_bandwidth_groups *int
}

// GroupsEdges holds the relations/edges for other nodes in the graph.
type GroupsEdges struct {
	// UseBandwidth holds the value of the use_bandwidth edge.
	UseBandwidth *GroupBandwidth `json:"use_bandwidth,omitempty"`
	// Users holds the value of the users edge.
	Users []*Users `json:"users,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// UseBandwidthOrErr returns the UseBandwidth value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e GroupsEdges) UseBandwidthOrErr() (*GroupBandwidth, error) {
	if e.loadedTypes[0] {
		if e.UseBandwidth == nil {
			// The edge use_bandwidth was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: groupbandwidth.Label}
		}
		return e.UseBandwidth, nil
	}
	return nil, &NotLoadedError{edge: "use_bandwidth"}
}

// UsersOrErr returns the Users value or an error if the edge
// was not loaded in eager-loading.
func (e GroupsEdges) UsersOrErr() ([]*Users, error) {
	if e.loadedTypes[1] {
		return e.Users, nil
	}
	return nil, &NotLoadedError{edge: "users"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Groups) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case groups.FieldGIsIntOrg, groups.FieldGIsSuperAdmin:
			values[i] = new(sql.NullBool)
		case groups.FieldID:
			values[i] = new(sql.NullInt64)
		case groups.FieldGName:
			values[i] = new(sql.NullString)
		case groups.FieldGCreatedAt:
			values[i] = new(sql.NullTime)
		case groups.ForeignKeys[0]: // group_bandwidth_groups
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Groups", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Groups fields.
func (gr *Groups) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case groups.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			gr.ID = int(value.Int64)
		case groups.FieldGName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field g_name", values[i])
			} else if value.Valid {
				gr.GName = value.String
			}
		case groups.FieldGIsIntOrg:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field g_is_int_org", values[i])
			} else if value.Valid {
				gr.GIsIntOrg = value.Bool
			}
		case groups.FieldGIsSuperAdmin:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field g_is_super_admin", values[i])
			} else if value.Valid {
				gr.GIsSuperAdmin = value.Bool
			}
		case groups.FieldGCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field g_created_at", values[i])
			} else if value.Valid {
				gr.GCreatedAt = value.Time
			}
		case groups.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field group_bandwidth_groups", value)
			} else if value.Valid {
				gr.group_bandwidth_groups = new(int)
				*gr.group_bandwidth_groups = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryUseBandwidth queries the "use_bandwidth" edge of the Groups entity.
func (gr *Groups) QueryUseBandwidth() *GroupBandwidthQuery {
	return (&GroupsClient{config: gr.config}).QueryUseBandwidth(gr)
}

// QueryUsers queries the "users" edge of the Groups entity.
func (gr *Groups) QueryUsers() *UsersQuery {
	return (&GroupsClient{config: gr.config}).QueryUsers(gr)
}

// Update returns a builder for updating this Groups.
// Note that you need to call Groups.Unwrap() before calling this method if this Groups
// was returned from a transaction, and the transaction was committed or rolled back.
func (gr *Groups) Update() *GroupsUpdateOne {
	return (&GroupsClient{config: gr.config}).UpdateOne(gr)
}

// Unwrap unwraps the Groups entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (gr *Groups) Unwrap() *Groups {
	tx, ok := gr.config.driver.(*txDriver)
	if !ok {
		panic("ent: Groups is not a transactional entity")
	}
	gr.config.driver = tx.drv
	return gr
}

// String implements the fmt.Stringer.
func (gr *Groups) String() string {
	var builder strings.Builder
	builder.WriteString("Groups(")
	builder.WriteString(fmt.Sprintf("id=%v", gr.ID))
	builder.WriteString(", g_name=")
	builder.WriteString(gr.GName)
	builder.WriteString(", g_is_int_org=")
	builder.WriteString(fmt.Sprintf("%v", gr.GIsIntOrg))
	builder.WriteString(", g_is_super_admin=")
	builder.WriteString(fmt.Sprintf("%v", gr.GIsSuperAdmin))
	builder.WriteString(", g_created_at=")
	builder.WriteString(gr.GCreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// GroupsSlice is a parsable slice of Groups.
type GroupsSlice []*Groups

func (gr GroupsSlice) config(cfg config) {
	for _i := range gr {
		gr[_i].config = cfg
	}
}
