// Code generated by entc, DO NOT EDIT.

package users

import (
	"time"
)

const (
	// Label holds the string label denoting the users type in the database.
	Label = "users"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUPid holds the string denoting the u_pid field in the database.
	FieldUPid = "u_pid"
	// FieldUOrgid holds the string denoting the u_orgid field in the database.
	FieldUOrgid = "u_orgid"
	// FieldUFirstName holds the string denoting the u_first_name field in the database.
	FieldUFirstName = "u_first_name"
	// FieldULastName holds the string denoting the u_last_name field in the database.
	FieldULastName = "u_last_name"
	// FieldUIsActive holds the string denoting the u_is_active field in the database.
	FieldUIsActive = "u_is_active"
	// FieldUCreatedAt holds the string denoting the u_created_at field in the database.
	FieldUCreatedAt = "u_created_at"
	// FieldUPasswordUpdatedAt holds the string denoting the u_password_updated_at field in the database.
	FieldUPasswordUpdatedAt = "u_password_updated_at"
	// FieldUExpiredAt holds the string denoting the u_expired_at field in the database.
	FieldUExpiredAt = "u_expired_at"
	// EdgeInGroup holds the string denoting the in_group edge name in mutations.
	EdgeInGroup = "in_group"
	// Table holds the table name of the users in the database.
	Table = "users"
	// InGroupTable is the table that holds the in_group relation/edge.
	InGroupTable = "users"
	// InGroupInverseTable is the table name for the Groups entity.
	// It exists in this package in order to avoid circular dependency with the "groups" package.
	InGroupInverseTable = "groups"
	// InGroupColumn is the table column denoting the in_group relation/edge.
	InGroupColumn = "groups_users"
)

// Columns holds all SQL columns for users fields.
var Columns = []string{
	FieldID,
	FieldUPid,
	FieldUOrgid,
	FieldUFirstName,
	FieldULastName,
	FieldUIsActive,
	FieldUCreatedAt,
	FieldUPasswordUpdatedAt,
	FieldUExpiredAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "users"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"groups_users",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// UPidValidator is a validator for the "u_pid" field. It is called by the builders before save.
	UPidValidator func(string) error
	// UOrgidValidator is a validator for the "u_orgid" field. It is called by the builders before save.
	UOrgidValidator func(string) error
	// UFirstNameValidator is a validator for the "u_first_name" field. It is called by the builders before save.
	UFirstNameValidator func(string) error
	// ULastNameValidator is a validator for the "u_last_name" field. It is called by the builders before save.
	ULastNameValidator func(string) error
	// DefaultUIsActive holds the default value on creation for the "u_is_active" field.
	DefaultUIsActive bool
	// DefaultUCreatedAt holds the default value on creation for the "u_created_at" field.
	DefaultUCreatedAt func() time.Time
)
