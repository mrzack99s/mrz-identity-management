// Code generated by entc, DO NOT EDIT.

package users

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/mrzack99s/mrz-identity-management/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Users {
	return predicate.Users(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Users {
	return predicate.Users(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Users {
	return predicate.Users(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Users {
	return predicate.Users(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Users {
	return predicate.Users(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Users {
	return predicate.Users(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Users {
	return predicate.Users(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Users {
	return predicate.Users(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Users {
	return predicate.Users(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// UPid applies equality check predicate on the "u_pid" field. It's identical to UPidEQ.
func UPid(v string) predicate.Users {
	return predicate.Users(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUPid), v))
	})
}

// UOrgid applies equality check predicate on the "u_orgid" field. It's identical to UOrgidEQ.
func UOrgid(v string) predicate.Users {
	return predicate.Users(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUOrgid), v))
	})
}

// UFirstName applies equality check predicate on the "u_first_name" field. It's identical to UFirstNameEQ.
func UFirstName(v string) predicate.Users {
	return predicate.Users(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUFirstName), v))
	})
}

// ULastName applies equality check predicate on the "u_last_name" field. It's identical to ULastNameEQ.
func ULastName(v string) predicate.Users {
	return predicate.Users(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldULastName), v))
	})
}

// UIsActive applies equality check predicate on the "u_is_active" field. It's identical to UIsActiveEQ.
func UIsActive(v bool) predicate.Users {
	return predicate.Users(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUIsActive), v))
	})
}

// UCreatedAt applies equality check predicate on the "u_created_at" field. It's identical to UCreatedAtEQ.
func UCreatedAt(v time.Time) predicate.Users {
	return predicate.Users(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUCreatedAt), v))
	})
}

// UPasswordUpdatedAt applies equality check predicate on the "u_password_updated_at" field. It's identical to UPasswordUpdatedAtEQ.
func UPasswordUpdatedAt(v time.Time) predicate.Users {
	return predicate.Users(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUPasswordUpdatedAt), v))
	})
}

// UExpiredAt applies equality check predicate on the "u_expired_at" field. It's identical to UExpiredAtEQ.
func UExpiredAt(v time.Time) predicate.Users {
	return predicate.Users(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUExpiredAt), v))
	})
}

// UPidEQ applies the EQ predicate on the "u_pid" field.
func UPidEQ(v string) predicate.Users {
	return predicate.Users(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUPid), v))
	})
}

// UPidNEQ applies the NEQ predicate on the "u_pid" field.
func UPidNEQ(v string) predicate.Users {
	return predicate.Users(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUPid), v))
	})
}

// UPidIn applies the In predicate on the "u_pid" field.
func UPidIn(vs ...string) predicate.Users {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Users(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUPid), v...))
	})
}

// UPidNotIn applies the NotIn predicate on the "u_pid" field.
func UPidNotIn(vs ...string) predicate.Users {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Users(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUPid), v...))
	})
}

// UPidGT applies the GT predicate on the "u_pid" field.
func UPidGT(v string) predicate.Users {
	return predicate.Users(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUPid), v))
	})
}

// UPidGTE applies the GTE predicate on the "u_pid" field.
func UPidGTE(v string) predicate.Users {
	return predicate.Users(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUPid), v))
	})
}

// UPidLT applies the LT predicate on the "u_pid" field.
func UPidLT(v string) predicate.Users {
	return predicate.Users(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUPid), v))
	})
}

// UPidLTE applies the LTE predicate on the "u_pid" field.
func UPidLTE(v string) predicate.Users {
	return predicate.Users(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUPid), v))
	})
}

// UPidContains applies the Contains predicate on the "u_pid" field.
func UPidContains(v string) predicate.Users {
	return predicate.Users(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldUPid), v))
	})
}

// UPidHasPrefix applies the HasPrefix predicate on the "u_pid" field.
func UPidHasPrefix(v string) predicate.Users {
	return predicate.Users(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldUPid), v))
	})
}

// UPidHasSuffix applies the HasSuffix predicate on the "u_pid" field.
func UPidHasSuffix(v string) predicate.Users {
	return predicate.Users(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldUPid), v))
	})
}

// UPidEqualFold applies the EqualFold predicate on the "u_pid" field.
func UPidEqualFold(v string) predicate.Users {
	return predicate.Users(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldUPid), v))
	})
}

// UPidContainsFold applies the ContainsFold predicate on the "u_pid" field.
func UPidContainsFold(v string) predicate.Users {
	return predicate.Users(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldUPid), v))
	})
}

// UOrgidEQ applies the EQ predicate on the "u_orgid" field.
func UOrgidEQ(v string) predicate.Users {
	return predicate.Users(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUOrgid), v))
	})
}

// UOrgidNEQ applies the NEQ predicate on the "u_orgid" field.
func UOrgidNEQ(v string) predicate.Users {
	return predicate.Users(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUOrgid), v))
	})
}

// UOrgidIn applies the In predicate on the "u_orgid" field.
func UOrgidIn(vs ...string) predicate.Users {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Users(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUOrgid), v...))
	})
}

// UOrgidNotIn applies the NotIn predicate on the "u_orgid" field.
func UOrgidNotIn(vs ...string) predicate.Users {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Users(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUOrgid), v...))
	})
}

// UOrgidGT applies the GT predicate on the "u_orgid" field.
func UOrgidGT(v string) predicate.Users {
	return predicate.Users(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUOrgid), v))
	})
}

// UOrgidGTE applies the GTE predicate on the "u_orgid" field.
func UOrgidGTE(v string) predicate.Users {
	return predicate.Users(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUOrgid), v))
	})
}

// UOrgidLT applies the LT predicate on the "u_orgid" field.
func UOrgidLT(v string) predicate.Users {
	return predicate.Users(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUOrgid), v))
	})
}

// UOrgidLTE applies the LTE predicate on the "u_orgid" field.
func UOrgidLTE(v string) predicate.Users {
	return predicate.Users(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUOrgid), v))
	})
}

// UOrgidContains applies the Contains predicate on the "u_orgid" field.
func UOrgidContains(v string) predicate.Users {
	return predicate.Users(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldUOrgid), v))
	})
}

// UOrgidHasPrefix applies the HasPrefix predicate on the "u_orgid" field.
func UOrgidHasPrefix(v string) predicate.Users {
	return predicate.Users(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldUOrgid), v))
	})
}

// UOrgidHasSuffix applies the HasSuffix predicate on the "u_orgid" field.
func UOrgidHasSuffix(v string) predicate.Users {
	return predicate.Users(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldUOrgid), v))
	})
}

// UOrgidEqualFold applies the EqualFold predicate on the "u_orgid" field.
func UOrgidEqualFold(v string) predicate.Users {
	return predicate.Users(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldUOrgid), v))
	})
}

// UOrgidContainsFold applies the ContainsFold predicate on the "u_orgid" field.
func UOrgidContainsFold(v string) predicate.Users {
	return predicate.Users(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldUOrgid), v))
	})
}

// UFirstNameEQ applies the EQ predicate on the "u_first_name" field.
func UFirstNameEQ(v string) predicate.Users {
	return predicate.Users(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUFirstName), v))
	})
}

// UFirstNameNEQ applies the NEQ predicate on the "u_first_name" field.
func UFirstNameNEQ(v string) predicate.Users {
	return predicate.Users(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUFirstName), v))
	})
}

// UFirstNameIn applies the In predicate on the "u_first_name" field.
func UFirstNameIn(vs ...string) predicate.Users {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Users(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUFirstName), v...))
	})
}

// UFirstNameNotIn applies the NotIn predicate on the "u_first_name" field.
func UFirstNameNotIn(vs ...string) predicate.Users {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Users(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUFirstName), v...))
	})
}

// UFirstNameGT applies the GT predicate on the "u_first_name" field.
func UFirstNameGT(v string) predicate.Users {
	return predicate.Users(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUFirstName), v))
	})
}

// UFirstNameGTE applies the GTE predicate on the "u_first_name" field.
func UFirstNameGTE(v string) predicate.Users {
	return predicate.Users(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUFirstName), v))
	})
}

// UFirstNameLT applies the LT predicate on the "u_first_name" field.
func UFirstNameLT(v string) predicate.Users {
	return predicate.Users(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUFirstName), v))
	})
}

// UFirstNameLTE applies the LTE predicate on the "u_first_name" field.
func UFirstNameLTE(v string) predicate.Users {
	return predicate.Users(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUFirstName), v))
	})
}

// UFirstNameContains applies the Contains predicate on the "u_first_name" field.
func UFirstNameContains(v string) predicate.Users {
	return predicate.Users(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldUFirstName), v))
	})
}

// UFirstNameHasPrefix applies the HasPrefix predicate on the "u_first_name" field.
func UFirstNameHasPrefix(v string) predicate.Users {
	return predicate.Users(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldUFirstName), v))
	})
}

// UFirstNameHasSuffix applies the HasSuffix predicate on the "u_first_name" field.
func UFirstNameHasSuffix(v string) predicate.Users {
	return predicate.Users(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldUFirstName), v))
	})
}

// UFirstNameEqualFold applies the EqualFold predicate on the "u_first_name" field.
func UFirstNameEqualFold(v string) predicate.Users {
	return predicate.Users(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldUFirstName), v))
	})
}

// UFirstNameContainsFold applies the ContainsFold predicate on the "u_first_name" field.
func UFirstNameContainsFold(v string) predicate.Users {
	return predicate.Users(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldUFirstName), v))
	})
}

// ULastNameEQ applies the EQ predicate on the "u_last_name" field.
func ULastNameEQ(v string) predicate.Users {
	return predicate.Users(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldULastName), v))
	})
}

// ULastNameNEQ applies the NEQ predicate on the "u_last_name" field.
func ULastNameNEQ(v string) predicate.Users {
	return predicate.Users(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldULastName), v))
	})
}

// ULastNameIn applies the In predicate on the "u_last_name" field.
func ULastNameIn(vs ...string) predicate.Users {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Users(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldULastName), v...))
	})
}

// ULastNameNotIn applies the NotIn predicate on the "u_last_name" field.
func ULastNameNotIn(vs ...string) predicate.Users {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Users(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldULastName), v...))
	})
}

// ULastNameGT applies the GT predicate on the "u_last_name" field.
func ULastNameGT(v string) predicate.Users {
	return predicate.Users(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldULastName), v))
	})
}

// ULastNameGTE applies the GTE predicate on the "u_last_name" field.
func ULastNameGTE(v string) predicate.Users {
	return predicate.Users(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldULastName), v))
	})
}

// ULastNameLT applies the LT predicate on the "u_last_name" field.
func ULastNameLT(v string) predicate.Users {
	return predicate.Users(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldULastName), v))
	})
}

// ULastNameLTE applies the LTE predicate on the "u_last_name" field.
func ULastNameLTE(v string) predicate.Users {
	return predicate.Users(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldULastName), v))
	})
}

// ULastNameContains applies the Contains predicate on the "u_last_name" field.
func ULastNameContains(v string) predicate.Users {
	return predicate.Users(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldULastName), v))
	})
}

// ULastNameHasPrefix applies the HasPrefix predicate on the "u_last_name" field.
func ULastNameHasPrefix(v string) predicate.Users {
	return predicate.Users(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldULastName), v))
	})
}

// ULastNameHasSuffix applies the HasSuffix predicate on the "u_last_name" field.
func ULastNameHasSuffix(v string) predicate.Users {
	return predicate.Users(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldULastName), v))
	})
}

// ULastNameEqualFold applies the EqualFold predicate on the "u_last_name" field.
func ULastNameEqualFold(v string) predicate.Users {
	return predicate.Users(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldULastName), v))
	})
}

// ULastNameContainsFold applies the ContainsFold predicate on the "u_last_name" field.
func ULastNameContainsFold(v string) predicate.Users {
	return predicate.Users(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldULastName), v))
	})
}

// UIsActiveEQ applies the EQ predicate on the "u_is_active" field.
func UIsActiveEQ(v bool) predicate.Users {
	return predicate.Users(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUIsActive), v))
	})
}

// UIsActiveNEQ applies the NEQ predicate on the "u_is_active" field.
func UIsActiveNEQ(v bool) predicate.Users {
	return predicate.Users(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUIsActive), v))
	})
}

// UCreatedAtEQ applies the EQ predicate on the "u_created_at" field.
func UCreatedAtEQ(v time.Time) predicate.Users {
	return predicate.Users(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUCreatedAt), v))
	})
}

// UCreatedAtNEQ applies the NEQ predicate on the "u_created_at" field.
func UCreatedAtNEQ(v time.Time) predicate.Users {
	return predicate.Users(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUCreatedAt), v))
	})
}

// UCreatedAtIn applies the In predicate on the "u_created_at" field.
func UCreatedAtIn(vs ...time.Time) predicate.Users {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Users(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUCreatedAt), v...))
	})
}

// UCreatedAtNotIn applies the NotIn predicate on the "u_created_at" field.
func UCreatedAtNotIn(vs ...time.Time) predicate.Users {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Users(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUCreatedAt), v...))
	})
}

// UCreatedAtGT applies the GT predicate on the "u_created_at" field.
func UCreatedAtGT(v time.Time) predicate.Users {
	return predicate.Users(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUCreatedAt), v))
	})
}

// UCreatedAtGTE applies the GTE predicate on the "u_created_at" field.
func UCreatedAtGTE(v time.Time) predicate.Users {
	return predicate.Users(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUCreatedAt), v))
	})
}

// UCreatedAtLT applies the LT predicate on the "u_created_at" field.
func UCreatedAtLT(v time.Time) predicate.Users {
	return predicate.Users(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUCreatedAt), v))
	})
}

// UCreatedAtLTE applies the LTE predicate on the "u_created_at" field.
func UCreatedAtLTE(v time.Time) predicate.Users {
	return predicate.Users(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUCreatedAt), v))
	})
}

// UCreatedAtIsNil applies the IsNil predicate on the "u_created_at" field.
func UCreatedAtIsNil() predicate.Users {
	return predicate.Users(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUCreatedAt)))
	})
}

// UCreatedAtNotNil applies the NotNil predicate on the "u_created_at" field.
func UCreatedAtNotNil() predicate.Users {
	return predicate.Users(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUCreatedAt)))
	})
}

// UPasswordUpdatedAtEQ applies the EQ predicate on the "u_password_updated_at" field.
func UPasswordUpdatedAtEQ(v time.Time) predicate.Users {
	return predicate.Users(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUPasswordUpdatedAt), v))
	})
}

// UPasswordUpdatedAtNEQ applies the NEQ predicate on the "u_password_updated_at" field.
func UPasswordUpdatedAtNEQ(v time.Time) predicate.Users {
	return predicate.Users(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUPasswordUpdatedAt), v))
	})
}

// UPasswordUpdatedAtIn applies the In predicate on the "u_password_updated_at" field.
func UPasswordUpdatedAtIn(vs ...time.Time) predicate.Users {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Users(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUPasswordUpdatedAt), v...))
	})
}

// UPasswordUpdatedAtNotIn applies the NotIn predicate on the "u_password_updated_at" field.
func UPasswordUpdatedAtNotIn(vs ...time.Time) predicate.Users {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Users(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUPasswordUpdatedAt), v...))
	})
}

// UPasswordUpdatedAtGT applies the GT predicate on the "u_password_updated_at" field.
func UPasswordUpdatedAtGT(v time.Time) predicate.Users {
	return predicate.Users(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUPasswordUpdatedAt), v))
	})
}

// UPasswordUpdatedAtGTE applies the GTE predicate on the "u_password_updated_at" field.
func UPasswordUpdatedAtGTE(v time.Time) predicate.Users {
	return predicate.Users(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUPasswordUpdatedAt), v))
	})
}

// UPasswordUpdatedAtLT applies the LT predicate on the "u_password_updated_at" field.
func UPasswordUpdatedAtLT(v time.Time) predicate.Users {
	return predicate.Users(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUPasswordUpdatedAt), v))
	})
}

// UPasswordUpdatedAtLTE applies the LTE predicate on the "u_password_updated_at" field.
func UPasswordUpdatedAtLTE(v time.Time) predicate.Users {
	return predicate.Users(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUPasswordUpdatedAt), v))
	})
}

// UPasswordUpdatedAtIsNil applies the IsNil predicate on the "u_password_updated_at" field.
func UPasswordUpdatedAtIsNil() predicate.Users {
	return predicate.Users(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUPasswordUpdatedAt)))
	})
}

// UPasswordUpdatedAtNotNil applies the NotNil predicate on the "u_password_updated_at" field.
func UPasswordUpdatedAtNotNil() predicate.Users {
	return predicate.Users(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUPasswordUpdatedAt)))
	})
}

// UExpiredAtEQ applies the EQ predicate on the "u_expired_at" field.
func UExpiredAtEQ(v time.Time) predicate.Users {
	return predicate.Users(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUExpiredAt), v))
	})
}

// UExpiredAtNEQ applies the NEQ predicate on the "u_expired_at" field.
func UExpiredAtNEQ(v time.Time) predicate.Users {
	return predicate.Users(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUExpiredAt), v))
	})
}

// UExpiredAtIn applies the In predicate on the "u_expired_at" field.
func UExpiredAtIn(vs ...time.Time) predicate.Users {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Users(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUExpiredAt), v...))
	})
}

// UExpiredAtNotIn applies the NotIn predicate on the "u_expired_at" field.
func UExpiredAtNotIn(vs ...time.Time) predicate.Users {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Users(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUExpiredAt), v...))
	})
}

// UExpiredAtGT applies the GT predicate on the "u_expired_at" field.
func UExpiredAtGT(v time.Time) predicate.Users {
	return predicate.Users(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUExpiredAt), v))
	})
}

// UExpiredAtGTE applies the GTE predicate on the "u_expired_at" field.
func UExpiredAtGTE(v time.Time) predicate.Users {
	return predicate.Users(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUExpiredAt), v))
	})
}

// UExpiredAtLT applies the LT predicate on the "u_expired_at" field.
func UExpiredAtLT(v time.Time) predicate.Users {
	return predicate.Users(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUExpiredAt), v))
	})
}

// UExpiredAtLTE applies the LTE predicate on the "u_expired_at" field.
func UExpiredAtLTE(v time.Time) predicate.Users {
	return predicate.Users(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUExpiredAt), v))
	})
}

// UExpiredAtIsNil applies the IsNil predicate on the "u_expired_at" field.
func UExpiredAtIsNil() predicate.Users {
	return predicate.Users(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUExpiredAt)))
	})
}

// UExpiredAtNotNil applies the NotNil predicate on the "u_expired_at" field.
func UExpiredAtNotNil() predicate.Users {
	return predicate.Users(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUExpiredAt)))
	})
}

// HasInGroup applies the HasEdge predicate on the "in_group" edge.
func HasInGroup() predicate.Users {
	return predicate.Users(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(InGroupTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, InGroupTable, InGroupColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasInGroupWith applies the HasEdge predicate on the "in_group" edge with a given conditions (other predicates).
func HasInGroupWith(preds ...predicate.Groups) predicate.Users {
	return predicate.Users(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(InGroupInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, InGroupTable, InGroupColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Users) predicate.Users {
	return predicate.Users(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Users) predicate.Users {
	return predicate.Users(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Users) predicate.Users {
	return predicate.Users(func(s *sql.Selector) {
		p(s.Not())
	})
}
