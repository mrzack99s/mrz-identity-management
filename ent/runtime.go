// Code generated by entc, DO NOT EDIT.

package ent

import (
	"time"

	"github.com/mrzack99s/mrz-identity-management/ent/groupbandwidth"
	"github.com/mrzack99s/mrz-identity-management/ent/groups"
	"github.com/mrzack99s/mrz-identity-management/ent/onlinesession"
	"github.com/mrzack99s/mrz-identity-management/ent/schema"
	"github.com/mrzack99s/mrz-identity-management/ent/users"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	groupbandwidthFields := schema.GroupBandwidth{}.Fields()
	_ = groupbandwidthFields
	// groupbandwidthDescGbwCreatedAt is the schema descriptor for gbw_created_at field.
	groupbandwidthDescGbwCreatedAt := groupbandwidthFields[2].Descriptor()
	// groupbandwidth.DefaultGbwCreatedAt holds the default value on creation for the gbw_created_at field.
	groupbandwidth.DefaultGbwCreatedAt = groupbandwidthDescGbwCreatedAt.Default.(func() time.Time)
	groupsFields := schema.Groups{}.Fields()
	_ = groupsFields
	// groupsDescGName is the schema descriptor for g_name field.
	groupsDescGName := groupsFields[0].Descriptor()
	// groups.GNameValidator is a validator for the "g_name" field. It is called by the builders before save.
	groups.GNameValidator = groupsDescGName.Validators[0].(func(string) error)
	// groupsDescGIsIntOrg is the schema descriptor for g_is_int_org field.
	groupsDescGIsIntOrg := groupsFields[1].Descriptor()
	// groups.DefaultGIsIntOrg holds the default value on creation for the g_is_int_org field.
	groups.DefaultGIsIntOrg = groupsDescGIsIntOrg.Default.(bool)
	// groupsDescGIsSuperAdmin is the schema descriptor for g_is_super_admin field.
	groupsDescGIsSuperAdmin := groupsFields[2].Descriptor()
	// groups.DefaultGIsSuperAdmin holds the default value on creation for the g_is_super_admin field.
	groups.DefaultGIsSuperAdmin = groupsDescGIsSuperAdmin.Default.(bool)
	// groupsDescGCreatedAt is the schema descriptor for g_created_at field.
	groupsDescGCreatedAt := groupsFields[3].Descriptor()
	// groups.DefaultGCreatedAt holds the default value on creation for the g_created_at field.
	groups.DefaultGCreatedAt = groupsDescGCreatedAt.Default.(func() time.Time)
	onlinesessionFields := schema.OnlineSession{}.Fields()
	_ = onlinesessionFields
	// onlinesessionDescIPAddress is the schema descriptor for ip_address field.
	onlinesessionDescIPAddress := onlinesessionFields[0].Descriptor()
	// onlinesession.IPAddressValidator is a validator for the "ip_address" field. It is called by the builders before save.
	onlinesession.IPAddressValidator = func() func(string) error {
		validators := onlinesessionDescIPAddress.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
			validators[2].(func(string) error),
			validators[3].(func(string) error),
		}
		return func(ip_address string) error {
			for _, fn := range fns {
				if err := fn(ip_address); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// onlinesessionDescUPid is the schema descriptor for u_pid field.
	onlinesessionDescUPid := onlinesessionFields[1].Descriptor()
	// onlinesession.UPidValidator is a validator for the "u_pid" field. It is called by the builders before save.
	onlinesession.UPidValidator = func() func(string) error {
		validators := onlinesessionDescUPid.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
			validators[2].(func(string) error),
		}
		return func(u_pid string) error {
			for _, fn := range fns {
				if err := fn(u_pid); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	usersFields := schema.Users{}.Fields()
	_ = usersFields
	// usersDescUPid is the schema descriptor for u_pid field.
	usersDescUPid := usersFields[0].Descriptor()
	// users.UPidValidator is a validator for the "u_pid" field. It is called by the builders before save.
	users.UPidValidator = func() func(string) error {
		validators := usersDescUPid.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
			validators[2].(func(string) error),
		}
		return func(u_pid string) error {
			for _, fn := range fns {
				if err := fn(u_pid); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// usersDescUOrgid is the schema descriptor for u_orgid field.
	usersDescUOrgid := usersFields[1].Descriptor()
	// users.UOrgidValidator is a validator for the "u_orgid" field. It is called by the builders before save.
	users.UOrgidValidator = func() func(string) error {
		validators := usersDescUOrgid.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
			validators[2].(func(string) error),
		}
		return func(u_orgid string) error {
			for _, fn := range fns {
				if err := fn(u_orgid); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// usersDescUFirstName is the schema descriptor for u_first_name field.
	usersDescUFirstName := usersFields[2].Descriptor()
	// users.UFirstNameValidator is a validator for the "u_first_name" field. It is called by the builders before save.
	users.UFirstNameValidator = func() func(string) error {
		validators := usersDescUFirstName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
			validators[2].(func(string) error),
		}
		return func(u_first_name string) error {
			for _, fn := range fns {
				if err := fn(u_first_name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// usersDescULastName is the schema descriptor for u_last_name field.
	usersDescULastName := usersFields[3].Descriptor()
	// users.ULastNameValidator is a validator for the "u_last_name" field. It is called by the builders before save.
	users.ULastNameValidator = func() func(string) error {
		validators := usersDescULastName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
			validators[2].(func(string) error),
		}
		return func(u_last_name string) error {
			for _, fn := range fns {
				if err := fn(u_last_name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// usersDescUIsActive is the schema descriptor for u_is_active field.
	usersDescUIsActive := usersFields[4].Descriptor()
	// users.DefaultUIsActive holds the default value on creation for the u_is_active field.
	users.DefaultUIsActive = usersDescUIsActive.Default.(bool)
	// usersDescUCreatedAt is the schema descriptor for u_created_at field.
	usersDescUCreatedAt := usersFields[5].Descriptor()
	// users.DefaultUCreatedAt holds the default value on creation for the u_created_at field.
	users.DefaultUCreatedAt = usersDescUCreatedAt.Default.(func() time.Time)
}
