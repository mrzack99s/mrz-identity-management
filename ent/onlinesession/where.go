// Code generated by entc, DO NOT EDIT.

package onlinesession

import (
	"entgo.io/ent/dialect/sql"
	"github.com/mrzack99s/mrz-identity-management/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.OnlineSession {
	return predicate.OnlineSession(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.OnlineSession {
	return predicate.OnlineSession(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.OnlineSession {
	return predicate.OnlineSession(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.OnlineSession {
	return predicate.OnlineSession(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.OnlineSession {
	return predicate.OnlineSession(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.OnlineSession {
	return predicate.OnlineSession(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.OnlineSession {
	return predicate.OnlineSession(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.OnlineSession {
	return predicate.OnlineSession(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.OnlineSession {
	return predicate.OnlineSession(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// IPAddress applies equality check predicate on the "ip_address" field. It's identical to IPAddressEQ.
func IPAddress(v string) predicate.OnlineSession {
	return predicate.OnlineSession(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIPAddress), v))
	})
}

// UPid applies equality check predicate on the "u_pid" field. It's identical to UPidEQ.
func UPid(v string) predicate.OnlineSession {
	return predicate.OnlineSession(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUPid), v))
	})
}

// IPAddressEQ applies the EQ predicate on the "ip_address" field.
func IPAddressEQ(v string) predicate.OnlineSession {
	return predicate.OnlineSession(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIPAddress), v))
	})
}

// IPAddressNEQ applies the NEQ predicate on the "ip_address" field.
func IPAddressNEQ(v string) predicate.OnlineSession {
	return predicate.OnlineSession(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIPAddress), v))
	})
}

// IPAddressIn applies the In predicate on the "ip_address" field.
func IPAddressIn(vs ...string) predicate.OnlineSession {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OnlineSession(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldIPAddress), v...))
	})
}

// IPAddressNotIn applies the NotIn predicate on the "ip_address" field.
func IPAddressNotIn(vs ...string) predicate.OnlineSession {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OnlineSession(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldIPAddress), v...))
	})
}

// IPAddressGT applies the GT predicate on the "ip_address" field.
func IPAddressGT(v string) predicate.OnlineSession {
	return predicate.OnlineSession(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldIPAddress), v))
	})
}

// IPAddressGTE applies the GTE predicate on the "ip_address" field.
func IPAddressGTE(v string) predicate.OnlineSession {
	return predicate.OnlineSession(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldIPAddress), v))
	})
}

// IPAddressLT applies the LT predicate on the "ip_address" field.
func IPAddressLT(v string) predicate.OnlineSession {
	return predicate.OnlineSession(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldIPAddress), v))
	})
}

// IPAddressLTE applies the LTE predicate on the "ip_address" field.
func IPAddressLTE(v string) predicate.OnlineSession {
	return predicate.OnlineSession(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldIPAddress), v))
	})
}

// IPAddressContains applies the Contains predicate on the "ip_address" field.
func IPAddressContains(v string) predicate.OnlineSession {
	return predicate.OnlineSession(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldIPAddress), v))
	})
}

// IPAddressHasPrefix applies the HasPrefix predicate on the "ip_address" field.
func IPAddressHasPrefix(v string) predicate.OnlineSession {
	return predicate.OnlineSession(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldIPAddress), v))
	})
}

// IPAddressHasSuffix applies the HasSuffix predicate on the "ip_address" field.
func IPAddressHasSuffix(v string) predicate.OnlineSession {
	return predicate.OnlineSession(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldIPAddress), v))
	})
}

// IPAddressEqualFold applies the EqualFold predicate on the "ip_address" field.
func IPAddressEqualFold(v string) predicate.OnlineSession {
	return predicate.OnlineSession(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldIPAddress), v))
	})
}

// IPAddressContainsFold applies the ContainsFold predicate on the "ip_address" field.
func IPAddressContainsFold(v string) predicate.OnlineSession {
	return predicate.OnlineSession(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldIPAddress), v))
	})
}

// UPidEQ applies the EQ predicate on the "u_pid" field.
func UPidEQ(v string) predicate.OnlineSession {
	return predicate.OnlineSession(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUPid), v))
	})
}

// UPidNEQ applies the NEQ predicate on the "u_pid" field.
func UPidNEQ(v string) predicate.OnlineSession {
	return predicate.OnlineSession(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUPid), v))
	})
}

// UPidIn applies the In predicate on the "u_pid" field.
func UPidIn(vs ...string) predicate.OnlineSession {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OnlineSession(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUPid), v...))
	})
}

// UPidNotIn applies the NotIn predicate on the "u_pid" field.
func UPidNotIn(vs ...string) predicate.OnlineSession {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OnlineSession(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUPid), v...))
	})
}

// UPidGT applies the GT predicate on the "u_pid" field.
func UPidGT(v string) predicate.OnlineSession {
	return predicate.OnlineSession(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUPid), v))
	})
}

// UPidGTE applies the GTE predicate on the "u_pid" field.
func UPidGTE(v string) predicate.OnlineSession {
	return predicate.OnlineSession(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUPid), v))
	})
}

// UPidLT applies the LT predicate on the "u_pid" field.
func UPidLT(v string) predicate.OnlineSession {
	return predicate.OnlineSession(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUPid), v))
	})
}

// UPidLTE applies the LTE predicate on the "u_pid" field.
func UPidLTE(v string) predicate.OnlineSession {
	return predicate.OnlineSession(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUPid), v))
	})
}

// UPidContains applies the Contains predicate on the "u_pid" field.
func UPidContains(v string) predicate.OnlineSession {
	return predicate.OnlineSession(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldUPid), v))
	})
}

// UPidHasPrefix applies the HasPrefix predicate on the "u_pid" field.
func UPidHasPrefix(v string) predicate.OnlineSession {
	return predicate.OnlineSession(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldUPid), v))
	})
}

// UPidHasSuffix applies the HasSuffix predicate on the "u_pid" field.
func UPidHasSuffix(v string) predicate.OnlineSession {
	return predicate.OnlineSession(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldUPid), v))
	})
}

// UPidEqualFold applies the EqualFold predicate on the "u_pid" field.
func UPidEqualFold(v string) predicate.OnlineSession {
	return predicate.OnlineSession(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldUPid), v))
	})
}

// UPidContainsFold applies the ContainsFold predicate on the "u_pid" field.
func UPidContainsFold(v string) predicate.OnlineSession {
	return predicate.OnlineSession(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldUPid), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.OnlineSession) predicate.OnlineSession {
	return predicate.OnlineSession(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.OnlineSession) predicate.OnlineSession {
	return predicate.OnlineSession(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.OnlineSession) predicate.OnlineSession {
	return predicate.OnlineSession(func(s *sql.Selector) {
		p(s.Not())
	})
}
