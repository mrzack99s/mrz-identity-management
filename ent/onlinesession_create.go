// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/mrzack99s/mrz-identity-management/ent/onlinesession"
)

// OnlineSessionCreate is the builder for creating a OnlineSession entity.
type OnlineSessionCreate struct {
	config
	mutation *OnlineSessionMutation
	hooks    []Hook
}

// SetIPAddress sets the "ip_address" field.
func (osc *OnlineSessionCreate) SetIPAddress(s string) *OnlineSessionCreate {
	osc.mutation.SetIPAddress(s)
	return osc
}

// SetUPid sets the "u_pid" field.
func (osc *OnlineSessionCreate) SetUPid(s string) *OnlineSessionCreate {
	osc.mutation.SetUPid(s)
	return osc
}

// Mutation returns the OnlineSessionMutation object of the builder.
func (osc *OnlineSessionCreate) Mutation() *OnlineSessionMutation {
	return osc.mutation
}

// Save creates the OnlineSession in the database.
func (osc *OnlineSessionCreate) Save(ctx context.Context) (*OnlineSession, error) {
	var (
		err  error
		node *OnlineSession
	)
	if len(osc.hooks) == 0 {
		if err = osc.check(); err != nil {
			return nil, err
		}
		node, err = osc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OnlineSessionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = osc.check(); err != nil {
				return nil, err
			}
			osc.mutation = mutation
			if node, err = osc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(osc.hooks) - 1; i >= 0; i-- {
			if osc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = osc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, osc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (osc *OnlineSessionCreate) SaveX(ctx context.Context) *OnlineSession {
	v, err := osc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (osc *OnlineSessionCreate) Exec(ctx context.Context) error {
	_, err := osc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (osc *OnlineSessionCreate) ExecX(ctx context.Context) {
	if err := osc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (osc *OnlineSessionCreate) check() error {
	if _, ok := osc.mutation.IPAddress(); !ok {
		return &ValidationError{Name: "ip_address", err: errors.New(`ent: missing required field "ip_address"`)}
	}
	if v, ok := osc.mutation.IPAddress(); ok {
		if err := onlinesession.IPAddressValidator(v); err != nil {
			return &ValidationError{Name: "ip_address", err: fmt.Errorf(`ent: validator failed for field "ip_address": %w`, err)}
		}
	}
	if _, ok := osc.mutation.UPid(); !ok {
		return &ValidationError{Name: "u_pid", err: errors.New(`ent: missing required field "u_pid"`)}
	}
	if v, ok := osc.mutation.UPid(); ok {
		if err := onlinesession.UPidValidator(v); err != nil {
			return &ValidationError{Name: "u_pid", err: fmt.Errorf(`ent: validator failed for field "u_pid": %w`, err)}
		}
	}
	return nil
}

func (osc *OnlineSessionCreate) sqlSave(ctx context.Context) (*OnlineSession, error) {
	_node, _spec := osc.createSpec()
	if err := sqlgraph.CreateNode(ctx, osc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (osc *OnlineSessionCreate) createSpec() (*OnlineSession, *sqlgraph.CreateSpec) {
	var (
		_node = &OnlineSession{config: osc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: onlinesession.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: onlinesession.FieldID,
			},
		}
	)
	if value, ok := osc.mutation.IPAddress(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: onlinesession.FieldIPAddress,
		})
		_node.IPAddress = value
	}
	if value, ok := osc.mutation.UPid(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: onlinesession.FieldUPid,
		})
		_node.UPid = value
	}
	return _node, _spec
}

// OnlineSessionCreateBulk is the builder for creating many OnlineSession entities in bulk.
type OnlineSessionCreateBulk struct {
	config
	builders []*OnlineSessionCreate
}

// Save creates the OnlineSession entities in the database.
func (oscb *OnlineSessionCreateBulk) Save(ctx context.Context) ([]*OnlineSession, error) {
	specs := make([]*sqlgraph.CreateSpec, len(oscb.builders))
	nodes := make([]*OnlineSession, len(oscb.builders))
	mutators := make([]Mutator, len(oscb.builders))
	for i := range oscb.builders {
		func(i int, root context.Context) {
			builder := oscb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OnlineSessionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, oscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, oscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, oscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (oscb *OnlineSessionCreateBulk) SaveX(ctx context.Context) []*OnlineSession {
	v, err := oscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (oscb *OnlineSessionCreateBulk) Exec(ctx context.Context) error {
	_, err := oscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oscb *OnlineSessionCreateBulk) ExecX(ctx context.Context) {
	if err := oscb.Exec(ctx); err != nil {
		panic(err)
	}
}
