// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"github.com/mrzack99s/mrz-identity-management/ent/migrate"

	"github.com/mrzack99s/mrz-identity-management/ent/groupbandwidth"
	"github.com/mrzack99s/mrz-identity-management/ent/groups"
	"github.com/mrzack99s/mrz-identity-management/ent/onlinesession"
	"github.com/mrzack99s/mrz-identity-management/ent/users"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// GroupBandwidth is the client for interacting with the GroupBandwidth builders.
	GroupBandwidth *GroupBandwidthClient
	// Groups is the client for interacting with the Groups builders.
	Groups *GroupsClient
	// OnlineSession is the client for interacting with the OnlineSession builders.
	OnlineSession *OnlineSessionClient
	// Users is the client for interacting with the Users builders.
	Users *UsersClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.GroupBandwidth = NewGroupBandwidthClient(c.config)
	c.Groups = NewGroupsClient(c.config)
	c.OnlineSession = NewOnlineSessionClient(c.config)
	c.Users = NewUsersClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:            ctx,
		config:         cfg,
		GroupBandwidth: NewGroupBandwidthClient(cfg),
		Groups:         NewGroupsClient(cfg),
		OnlineSession:  NewOnlineSessionClient(cfg),
		Users:          NewUsersClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		config:         cfg,
		GroupBandwidth: NewGroupBandwidthClient(cfg),
		Groups:         NewGroupsClient(cfg),
		OnlineSession:  NewOnlineSessionClient(cfg),
		Users:          NewUsersClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		GroupBandwidth.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.GroupBandwidth.Use(hooks...)
	c.Groups.Use(hooks...)
	c.OnlineSession.Use(hooks...)
	c.Users.Use(hooks...)
}

// GroupBandwidthClient is a client for the GroupBandwidth schema.
type GroupBandwidthClient struct {
	config
}

// NewGroupBandwidthClient returns a client for the GroupBandwidth from the given config.
func NewGroupBandwidthClient(c config) *GroupBandwidthClient {
	return &GroupBandwidthClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `groupbandwidth.Hooks(f(g(h())))`.
func (c *GroupBandwidthClient) Use(hooks ...Hook) {
	c.hooks.GroupBandwidth = append(c.hooks.GroupBandwidth, hooks...)
}

// Create returns a create builder for GroupBandwidth.
func (c *GroupBandwidthClient) Create() *GroupBandwidthCreate {
	mutation := newGroupBandwidthMutation(c.config, OpCreate)
	return &GroupBandwidthCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of GroupBandwidth entities.
func (c *GroupBandwidthClient) CreateBulk(builders ...*GroupBandwidthCreate) *GroupBandwidthCreateBulk {
	return &GroupBandwidthCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for GroupBandwidth.
func (c *GroupBandwidthClient) Update() *GroupBandwidthUpdate {
	mutation := newGroupBandwidthMutation(c.config, OpUpdate)
	return &GroupBandwidthUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *GroupBandwidthClient) UpdateOne(gb *GroupBandwidth) *GroupBandwidthUpdateOne {
	mutation := newGroupBandwidthMutation(c.config, OpUpdateOne, withGroupBandwidth(gb))
	return &GroupBandwidthUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *GroupBandwidthClient) UpdateOneID(id int) *GroupBandwidthUpdateOne {
	mutation := newGroupBandwidthMutation(c.config, OpUpdateOne, withGroupBandwidthID(id))
	return &GroupBandwidthUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for GroupBandwidth.
func (c *GroupBandwidthClient) Delete() *GroupBandwidthDelete {
	mutation := newGroupBandwidthMutation(c.config, OpDelete)
	return &GroupBandwidthDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *GroupBandwidthClient) DeleteOne(gb *GroupBandwidth) *GroupBandwidthDeleteOne {
	return c.DeleteOneID(gb.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *GroupBandwidthClient) DeleteOneID(id int) *GroupBandwidthDeleteOne {
	builder := c.Delete().Where(groupbandwidth.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &GroupBandwidthDeleteOne{builder}
}

// Query returns a query builder for GroupBandwidth.
func (c *GroupBandwidthClient) Query() *GroupBandwidthQuery {
	return &GroupBandwidthQuery{
		config: c.config,
	}
}

// Get returns a GroupBandwidth entity by its id.
func (c *GroupBandwidthClient) Get(ctx context.Context, id int) (*GroupBandwidth, error) {
	return c.Query().Where(groupbandwidth.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *GroupBandwidthClient) GetX(ctx context.Context, id int) *GroupBandwidth {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryGroups queries the groups edge of a GroupBandwidth.
func (c *GroupBandwidthClient) QueryGroups(gb *GroupBandwidth) *GroupsQuery {
	query := &GroupsQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := gb.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(groupbandwidth.Table, groupbandwidth.FieldID, id),
			sqlgraph.To(groups.Table, groups.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, groupbandwidth.GroupsTable, groupbandwidth.GroupsColumn),
		)
		fromV = sqlgraph.Neighbors(gb.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *GroupBandwidthClient) Hooks() []Hook {
	return c.hooks.GroupBandwidth
}

// GroupsClient is a client for the Groups schema.
type GroupsClient struct {
	config
}

// NewGroupsClient returns a client for the Groups from the given config.
func NewGroupsClient(c config) *GroupsClient {
	return &GroupsClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `groups.Hooks(f(g(h())))`.
func (c *GroupsClient) Use(hooks ...Hook) {
	c.hooks.Groups = append(c.hooks.Groups, hooks...)
}

// Create returns a create builder for Groups.
func (c *GroupsClient) Create() *GroupsCreate {
	mutation := newGroupsMutation(c.config, OpCreate)
	return &GroupsCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Groups entities.
func (c *GroupsClient) CreateBulk(builders ...*GroupsCreate) *GroupsCreateBulk {
	return &GroupsCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Groups.
func (c *GroupsClient) Update() *GroupsUpdate {
	mutation := newGroupsMutation(c.config, OpUpdate)
	return &GroupsUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *GroupsClient) UpdateOne(gr *Groups) *GroupsUpdateOne {
	mutation := newGroupsMutation(c.config, OpUpdateOne, withGroups(gr))
	return &GroupsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *GroupsClient) UpdateOneID(id int) *GroupsUpdateOne {
	mutation := newGroupsMutation(c.config, OpUpdateOne, withGroupsID(id))
	return &GroupsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Groups.
func (c *GroupsClient) Delete() *GroupsDelete {
	mutation := newGroupsMutation(c.config, OpDelete)
	return &GroupsDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *GroupsClient) DeleteOne(gr *Groups) *GroupsDeleteOne {
	return c.DeleteOneID(gr.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *GroupsClient) DeleteOneID(id int) *GroupsDeleteOne {
	builder := c.Delete().Where(groups.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &GroupsDeleteOne{builder}
}

// Query returns a query builder for Groups.
func (c *GroupsClient) Query() *GroupsQuery {
	return &GroupsQuery{
		config: c.config,
	}
}

// Get returns a Groups entity by its id.
func (c *GroupsClient) Get(ctx context.Context, id int) (*Groups, error) {
	return c.Query().Where(groups.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *GroupsClient) GetX(ctx context.Context, id int) *Groups {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUseBandwidth queries the use_bandwidth edge of a Groups.
func (c *GroupsClient) QueryUseBandwidth(gr *Groups) *GroupBandwidthQuery {
	query := &GroupBandwidthQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := gr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(groups.Table, groups.FieldID, id),
			sqlgraph.To(groupbandwidth.Table, groupbandwidth.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, groups.UseBandwidthTable, groups.UseBandwidthColumn),
		)
		fromV = sqlgraph.Neighbors(gr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUsers queries the users edge of a Groups.
func (c *GroupsClient) QueryUsers(gr *Groups) *UsersQuery {
	query := &UsersQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := gr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(groups.Table, groups.FieldID, id),
			sqlgraph.To(users.Table, users.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, groups.UsersTable, groups.UsersColumn),
		)
		fromV = sqlgraph.Neighbors(gr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *GroupsClient) Hooks() []Hook {
	return c.hooks.Groups
}

// OnlineSessionClient is a client for the OnlineSession schema.
type OnlineSessionClient struct {
	config
}

// NewOnlineSessionClient returns a client for the OnlineSession from the given config.
func NewOnlineSessionClient(c config) *OnlineSessionClient {
	return &OnlineSessionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `onlinesession.Hooks(f(g(h())))`.
func (c *OnlineSessionClient) Use(hooks ...Hook) {
	c.hooks.OnlineSession = append(c.hooks.OnlineSession, hooks...)
}

// Create returns a create builder for OnlineSession.
func (c *OnlineSessionClient) Create() *OnlineSessionCreate {
	mutation := newOnlineSessionMutation(c.config, OpCreate)
	return &OnlineSessionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of OnlineSession entities.
func (c *OnlineSessionClient) CreateBulk(builders ...*OnlineSessionCreate) *OnlineSessionCreateBulk {
	return &OnlineSessionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for OnlineSession.
func (c *OnlineSessionClient) Update() *OnlineSessionUpdate {
	mutation := newOnlineSessionMutation(c.config, OpUpdate)
	return &OnlineSessionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OnlineSessionClient) UpdateOne(os *OnlineSession) *OnlineSessionUpdateOne {
	mutation := newOnlineSessionMutation(c.config, OpUpdateOne, withOnlineSession(os))
	return &OnlineSessionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OnlineSessionClient) UpdateOneID(id int) *OnlineSessionUpdateOne {
	mutation := newOnlineSessionMutation(c.config, OpUpdateOne, withOnlineSessionID(id))
	return &OnlineSessionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for OnlineSession.
func (c *OnlineSessionClient) Delete() *OnlineSessionDelete {
	mutation := newOnlineSessionMutation(c.config, OpDelete)
	return &OnlineSessionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *OnlineSessionClient) DeleteOne(os *OnlineSession) *OnlineSessionDeleteOne {
	return c.DeleteOneID(os.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *OnlineSessionClient) DeleteOneID(id int) *OnlineSessionDeleteOne {
	builder := c.Delete().Where(onlinesession.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OnlineSessionDeleteOne{builder}
}

// Query returns a query builder for OnlineSession.
func (c *OnlineSessionClient) Query() *OnlineSessionQuery {
	return &OnlineSessionQuery{
		config: c.config,
	}
}

// Get returns a OnlineSession entity by its id.
func (c *OnlineSessionClient) Get(ctx context.Context, id int) (*OnlineSession, error) {
	return c.Query().Where(onlinesession.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OnlineSessionClient) GetX(ctx context.Context, id int) *OnlineSession {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *OnlineSessionClient) Hooks() []Hook {
	return c.hooks.OnlineSession
}

// UsersClient is a client for the Users schema.
type UsersClient struct {
	config
}

// NewUsersClient returns a client for the Users from the given config.
func NewUsersClient(c config) *UsersClient {
	return &UsersClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `users.Hooks(f(g(h())))`.
func (c *UsersClient) Use(hooks ...Hook) {
	c.hooks.Users = append(c.hooks.Users, hooks...)
}

// Create returns a create builder for Users.
func (c *UsersClient) Create() *UsersCreate {
	mutation := newUsersMutation(c.config, OpCreate)
	return &UsersCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Users entities.
func (c *UsersClient) CreateBulk(builders ...*UsersCreate) *UsersCreateBulk {
	return &UsersCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Users.
func (c *UsersClient) Update() *UsersUpdate {
	mutation := newUsersMutation(c.config, OpUpdate)
	return &UsersUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UsersClient) UpdateOne(u *Users) *UsersUpdateOne {
	mutation := newUsersMutation(c.config, OpUpdateOne, withUsers(u))
	return &UsersUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UsersClient) UpdateOneID(id int) *UsersUpdateOne {
	mutation := newUsersMutation(c.config, OpUpdateOne, withUsersID(id))
	return &UsersUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Users.
func (c *UsersClient) Delete() *UsersDelete {
	mutation := newUsersMutation(c.config, OpDelete)
	return &UsersDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *UsersClient) DeleteOne(u *Users) *UsersDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *UsersClient) DeleteOneID(id int) *UsersDeleteOne {
	builder := c.Delete().Where(users.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UsersDeleteOne{builder}
}

// Query returns a query builder for Users.
func (c *UsersClient) Query() *UsersQuery {
	return &UsersQuery{
		config: c.config,
	}
}

// Get returns a Users entity by its id.
func (c *UsersClient) Get(ctx context.Context, id int) (*Users, error) {
	return c.Query().Where(users.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UsersClient) GetX(ctx context.Context, id int) *Users {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryInGroup queries the in_group edge of a Users.
func (c *UsersClient) QueryInGroup(u *Users) *GroupsQuery {
	query := &GroupsQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(users.Table, users.FieldID, id),
			sqlgraph.To(groups.Table, groups.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, users.InGroupTable, users.InGroupColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UsersClient) Hooks() []Hook {
	return c.hooks.Users
}
