// Code generated by entc, DO NOT EDIT.

package groupbandwidth

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/mrzack99s/mrz-identity-management/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.GroupBandwidth {
	return predicate.GroupBandwidth(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.GroupBandwidth {
	return predicate.GroupBandwidth(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.GroupBandwidth {
	return predicate.GroupBandwidth(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.GroupBandwidth {
	return predicate.GroupBandwidth(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.GroupBandwidth {
	return predicate.GroupBandwidth(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.GroupBandwidth {
	return predicate.GroupBandwidth(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.GroupBandwidth {
	return predicate.GroupBandwidth(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.GroupBandwidth {
	return predicate.GroupBandwidth(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.GroupBandwidth {
	return predicate.GroupBandwidth(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// GbwDownloadSpeed applies equality check predicate on the "gbw_download_speed" field. It's identical to GbwDownloadSpeedEQ.
func GbwDownloadSpeed(v int) predicate.GroupBandwidth {
	return predicate.GroupBandwidth(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGbwDownloadSpeed), v))
	})
}

// GbwUploadSpeed applies equality check predicate on the "gbw_upload_speed" field. It's identical to GbwUploadSpeedEQ.
func GbwUploadSpeed(v int) predicate.GroupBandwidth {
	return predicate.GroupBandwidth(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGbwUploadSpeed), v))
	})
}

// GbwCreatedAt applies equality check predicate on the "gbw_created_at" field. It's identical to GbwCreatedAtEQ.
func GbwCreatedAt(v time.Time) predicate.GroupBandwidth {
	return predicate.GroupBandwidth(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGbwCreatedAt), v))
	})
}

// GbwDownloadSpeedEQ applies the EQ predicate on the "gbw_download_speed" field.
func GbwDownloadSpeedEQ(v int) predicate.GroupBandwidth {
	return predicate.GroupBandwidth(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGbwDownloadSpeed), v))
	})
}

// GbwDownloadSpeedNEQ applies the NEQ predicate on the "gbw_download_speed" field.
func GbwDownloadSpeedNEQ(v int) predicate.GroupBandwidth {
	return predicate.GroupBandwidth(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldGbwDownloadSpeed), v))
	})
}

// GbwDownloadSpeedIn applies the In predicate on the "gbw_download_speed" field.
func GbwDownloadSpeedIn(vs ...int) predicate.GroupBandwidth {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GroupBandwidth(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldGbwDownloadSpeed), v...))
	})
}

// GbwDownloadSpeedNotIn applies the NotIn predicate on the "gbw_download_speed" field.
func GbwDownloadSpeedNotIn(vs ...int) predicate.GroupBandwidth {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GroupBandwidth(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldGbwDownloadSpeed), v...))
	})
}

// GbwDownloadSpeedGT applies the GT predicate on the "gbw_download_speed" field.
func GbwDownloadSpeedGT(v int) predicate.GroupBandwidth {
	return predicate.GroupBandwidth(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldGbwDownloadSpeed), v))
	})
}

// GbwDownloadSpeedGTE applies the GTE predicate on the "gbw_download_speed" field.
func GbwDownloadSpeedGTE(v int) predicate.GroupBandwidth {
	return predicate.GroupBandwidth(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldGbwDownloadSpeed), v))
	})
}

// GbwDownloadSpeedLT applies the LT predicate on the "gbw_download_speed" field.
func GbwDownloadSpeedLT(v int) predicate.GroupBandwidth {
	return predicate.GroupBandwidth(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldGbwDownloadSpeed), v))
	})
}

// GbwDownloadSpeedLTE applies the LTE predicate on the "gbw_download_speed" field.
func GbwDownloadSpeedLTE(v int) predicate.GroupBandwidth {
	return predicate.GroupBandwidth(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldGbwDownloadSpeed), v))
	})
}

// GbwUploadSpeedEQ applies the EQ predicate on the "gbw_upload_speed" field.
func GbwUploadSpeedEQ(v int) predicate.GroupBandwidth {
	return predicate.GroupBandwidth(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGbwUploadSpeed), v))
	})
}

// GbwUploadSpeedNEQ applies the NEQ predicate on the "gbw_upload_speed" field.
func GbwUploadSpeedNEQ(v int) predicate.GroupBandwidth {
	return predicate.GroupBandwidth(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldGbwUploadSpeed), v))
	})
}

// GbwUploadSpeedIn applies the In predicate on the "gbw_upload_speed" field.
func GbwUploadSpeedIn(vs ...int) predicate.GroupBandwidth {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GroupBandwidth(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldGbwUploadSpeed), v...))
	})
}

// GbwUploadSpeedNotIn applies the NotIn predicate on the "gbw_upload_speed" field.
func GbwUploadSpeedNotIn(vs ...int) predicate.GroupBandwidth {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GroupBandwidth(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldGbwUploadSpeed), v...))
	})
}

// GbwUploadSpeedGT applies the GT predicate on the "gbw_upload_speed" field.
func GbwUploadSpeedGT(v int) predicate.GroupBandwidth {
	return predicate.GroupBandwidth(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldGbwUploadSpeed), v))
	})
}

// GbwUploadSpeedGTE applies the GTE predicate on the "gbw_upload_speed" field.
func GbwUploadSpeedGTE(v int) predicate.GroupBandwidth {
	return predicate.GroupBandwidth(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldGbwUploadSpeed), v))
	})
}

// GbwUploadSpeedLT applies the LT predicate on the "gbw_upload_speed" field.
func GbwUploadSpeedLT(v int) predicate.GroupBandwidth {
	return predicate.GroupBandwidth(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldGbwUploadSpeed), v))
	})
}

// GbwUploadSpeedLTE applies the LTE predicate on the "gbw_upload_speed" field.
func GbwUploadSpeedLTE(v int) predicate.GroupBandwidth {
	return predicate.GroupBandwidth(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldGbwUploadSpeed), v))
	})
}

// GbwCreatedAtEQ applies the EQ predicate on the "gbw_created_at" field.
func GbwCreatedAtEQ(v time.Time) predicate.GroupBandwidth {
	return predicate.GroupBandwidth(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGbwCreatedAt), v))
	})
}

// GbwCreatedAtNEQ applies the NEQ predicate on the "gbw_created_at" field.
func GbwCreatedAtNEQ(v time.Time) predicate.GroupBandwidth {
	return predicate.GroupBandwidth(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldGbwCreatedAt), v))
	})
}

// GbwCreatedAtIn applies the In predicate on the "gbw_created_at" field.
func GbwCreatedAtIn(vs ...time.Time) predicate.GroupBandwidth {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GroupBandwidth(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldGbwCreatedAt), v...))
	})
}

// GbwCreatedAtNotIn applies the NotIn predicate on the "gbw_created_at" field.
func GbwCreatedAtNotIn(vs ...time.Time) predicate.GroupBandwidth {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GroupBandwidth(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldGbwCreatedAt), v...))
	})
}

// GbwCreatedAtGT applies the GT predicate on the "gbw_created_at" field.
func GbwCreatedAtGT(v time.Time) predicate.GroupBandwidth {
	return predicate.GroupBandwidth(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldGbwCreatedAt), v))
	})
}

// GbwCreatedAtGTE applies the GTE predicate on the "gbw_created_at" field.
func GbwCreatedAtGTE(v time.Time) predicate.GroupBandwidth {
	return predicate.GroupBandwidth(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldGbwCreatedAt), v))
	})
}

// GbwCreatedAtLT applies the LT predicate on the "gbw_created_at" field.
func GbwCreatedAtLT(v time.Time) predicate.GroupBandwidth {
	return predicate.GroupBandwidth(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldGbwCreatedAt), v))
	})
}

// GbwCreatedAtLTE applies the LTE predicate on the "gbw_created_at" field.
func GbwCreatedAtLTE(v time.Time) predicate.GroupBandwidth {
	return predicate.GroupBandwidth(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldGbwCreatedAt), v))
	})
}

// GbwCreatedAtIsNil applies the IsNil predicate on the "gbw_created_at" field.
func GbwCreatedAtIsNil() predicate.GroupBandwidth {
	return predicate.GroupBandwidth(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldGbwCreatedAt)))
	})
}

// GbwCreatedAtNotNil applies the NotNil predicate on the "gbw_created_at" field.
func GbwCreatedAtNotNil() predicate.GroupBandwidth {
	return predicate.GroupBandwidth(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldGbwCreatedAt)))
	})
}

// HasGroups applies the HasEdge predicate on the "groups" edge.
func HasGroups() predicate.GroupBandwidth {
	return predicate.GroupBandwidth(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(GroupsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, GroupsTable, GroupsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasGroupsWith applies the HasEdge predicate on the "groups" edge with a given conditions (other predicates).
func HasGroupsWith(preds ...predicate.Groups) predicate.GroupBandwidth {
	return predicate.GroupBandwidth(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(GroupsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, GroupsTable, GroupsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.GroupBandwidth) predicate.GroupBandwidth {
	return predicate.GroupBandwidth(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.GroupBandwidth) predicate.GroupBandwidth {
	return predicate.GroupBandwidth(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.GroupBandwidth) predicate.GroupBandwidth {
	return predicate.GroupBandwidth(func(s *sql.Selector) {
		p(s.Not())
	})
}
