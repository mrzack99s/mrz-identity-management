// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/mrzack99s/mrz-identity-management/ent/onlinesession"
)

// OnlineSession is the model entity for the OnlineSession schema.
type OnlineSession struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// IPAddress holds the value of the "ip_address" field.
	IPAddress string `json:"ip_address,omitempty"`
	// UPid holds the value of the "u_pid" field.
	UPid string `json:"u_pid,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*OnlineSession) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case onlinesession.FieldID:
			values[i] = new(sql.NullInt64)
		case onlinesession.FieldIPAddress, onlinesession.FieldUPid:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type OnlineSession", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the OnlineSession fields.
func (os *OnlineSession) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case onlinesession.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			os.ID = int(value.Int64)
		case onlinesession.FieldIPAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ip_address", values[i])
			} else if value.Valid {
				os.IPAddress = value.String
			}
		case onlinesession.FieldUPid:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field u_pid", values[i])
			} else if value.Valid {
				os.UPid = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this OnlineSession.
// Note that you need to call OnlineSession.Unwrap() before calling this method if this OnlineSession
// was returned from a transaction, and the transaction was committed or rolled back.
func (os *OnlineSession) Update() *OnlineSessionUpdateOne {
	return (&OnlineSessionClient{config: os.config}).UpdateOne(os)
}

// Unwrap unwraps the OnlineSession entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (os *OnlineSession) Unwrap() *OnlineSession {
	tx, ok := os.config.driver.(*txDriver)
	if !ok {
		panic("ent: OnlineSession is not a transactional entity")
	}
	os.config.driver = tx.drv
	return os
}

// String implements the fmt.Stringer.
func (os *OnlineSession) String() string {
	var builder strings.Builder
	builder.WriteString("OnlineSession(")
	builder.WriteString(fmt.Sprintf("id=%v", os.ID))
	builder.WriteString(", ip_address=")
	builder.WriteString(os.IPAddress)
	builder.WriteString(", u_pid=")
	builder.WriteString(os.UPid)
	builder.WriteByte(')')
	return builder.String()
}

// OnlineSessions is a parsable slice of OnlineSession.
type OnlineSessions []*OnlineSession

func (os OnlineSessions) config(cfg config) {
	for _i := range os {
		os[_i].config = cfg
	}
}
