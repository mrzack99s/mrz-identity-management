// Code generated by entc, DO NOT EDIT.

package groups

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/mrzack99s/mrz-identity-management/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Groups {
	return predicate.Groups(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Groups {
	return predicate.Groups(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Groups {
	return predicate.Groups(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Groups {
	return predicate.Groups(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Groups {
	return predicate.Groups(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Groups {
	return predicate.Groups(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Groups {
	return predicate.Groups(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Groups {
	return predicate.Groups(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Groups {
	return predicate.Groups(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// GName applies equality check predicate on the "g_name" field. It's identical to GNameEQ.
func GName(v string) predicate.Groups {
	return predicate.Groups(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGName), v))
	})
}

// GIsIntOrg applies equality check predicate on the "g_is_int_org" field. It's identical to GIsIntOrgEQ.
func GIsIntOrg(v bool) predicate.Groups {
	return predicate.Groups(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGIsIntOrg), v))
	})
}

// GIsSuperAdmin applies equality check predicate on the "g_is_super_admin" field. It's identical to GIsSuperAdminEQ.
func GIsSuperAdmin(v bool) predicate.Groups {
	return predicate.Groups(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGIsSuperAdmin), v))
	})
}

// GCreatedAt applies equality check predicate on the "g_created_at" field. It's identical to GCreatedAtEQ.
func GCreatedAt(v time.Time) predicate.Groups {
	return predicate.Groups(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGCreatedAt), v))
	})
}

// GNameEQ applies the EQ predicate on the "g_name" field.
func GNameEQ(v string) predicate.Groups {
	return predicate.Groups(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGName), v))
	})
}

// GNameNEQ applies the NEQ predicate on the "g_name" field.
func GNameNEQ(v string) predicate.Groups {
	return predicate.Groups(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldGName), v))
	})
}

// GNameIn applies the In predicate on the "g_name" field.
func GNameIn(vs ...string) predicate.Groups {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Groups(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldGName), v...))
	})
}

// GNameNotIn applies the NotIn predicate on the "g_name" field.
func GNameNotIn(vs ...string) predicate.Groups {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Groups(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldGName), v...))
	})
}

// GNameGT applies the GT predicate on the "g_name" field.
func GNameGT(v string) predicate.Groups {
	return predicate.Groups(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldGName), v))
	})
}

// GNameGTE applies the GTE predicate on the "g_name" field.
func GNameGTE(v string) predicate.Groups {
	return predicate.Groups(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldGName), v))
	})
}

// GNameLT applies the LT predicate on the "g_name" field.
func GNameLT(v string) predicate.Groups {
	return predicate.Groups(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldGName), v))
	})
}

// GNameLTE applies the LTE predicate on the "g_name" field.
func GNameLTE(v string) predicate.Groups {
	return predicate.Groups(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldGName), v))
	})
}

// GNameContains applies the Contains predicate on the "g_name" field.
func GNameContains(v string) predicate.Groups {
	return predicate.Groups(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldGName), v))
	})
}

// GNameHasPrefix applies the HasPrefix predicate on the "g_name" field.
func GNameHasPrefix(v string) predicate.Groups {
	return predicate.Groups(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldGName), v))
	})
}

// GNameHasSuffix applies the HasSuffix predicate on the "g_name" field.
func GNameHasSuffix(v string) predicate.Groups {
	return predicate.Groups(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldGName), v))
	})
}

// GNameEqualFold applies the EqualFold predicate on the "g_name" field.
func GNameEqualFold(v string) predicate.Groups {
	return predicate.Groups(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldGName), v))
	})
}

// GNameContainsFold applies the ContainsFold predicate on the "g_name" field.
func GNameContainsFold(v string) predicate.Groups {
	return predicate.Groups(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldGName), v))
	})
}

// GIsIntOrgEQ applies the EQ predicate on the "g_is_int_org" field.
func GIsIntOrgEQ(v bool) predicate.Groups {
	return predicate.Groups(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGIsIntOrg), v))
	})
}

// GIsIntOrgNEQ applies the NEQ predicate on the "g_is_int_org" field.
func GIsIntOrgNEQ(v bool) predicate.Groups {
	return predicate.Groups(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldGIsIntOrg), v))
	})
}

// GIsSuperAdminEQ applies the EQ predicate on the "g_is_super_admin" field.
func GIsSuperAdminEQ(v bool) predicate.Groups {
	return predicate.Groups(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGIsSuperAdmin), v))
	})
}

// GIsSuperAdminNEQ applies the NEQ predicate on the "g_is_super_admin" field.
func GIsSuperAdminNEQ(v bool) predicate.Groups {
	return predicate.Groups(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldGIsSuperAdmin), v))
	})
}

// GCreatedAtEQ applies the EQ predicate on the "g_created_at" field.
func GCreatedAtEQ(v time.Time) predicate.Groups {
	return predicate.Groups(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGCreatedAt), v))
	})
}

// GCreatedAtNEQ applies the NEQ predicate on the "g_created_at" field.
func GCreatedAtNEQ(v time.Time) predicate.Groups {
	return predicate.Groups(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldGCreatedAt), v))
	})
}

// GCreatedAtIn applies the In predicate on the "g_created_at" field.
func GCreatedAtIn(vs ...time.Time) predicate.Groups {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Groups(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldGCreatedAt), v...))
	})
}

// GCreatedAtNotIn applies the NotIn predicate on the "g_created_at" field.
func GCreatedAtNotIn(vs ...time.Time) predicate.Groups {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Groups(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldGCreatedAt), v...))
	})
}

// GCreatedAtGT applies the GT predicate on the "g_created_at" field.
func GCreatedAtGT(v time.Time) predicate.Groups {
	return predicate.Groups(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldGCreatedAt), v))
	})
}

// GCreatedAtGTE applies the GTE predicate on the "g_created_at" field.
func GCreatedAtGTE(v time.Time) predicate.Groups {
	return predicate.Groups(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldGCreatedAt), v))
	})
}

// GCreatedAtLT applies the LT predicate on the "g_created_at" field.
func GCreatedAtLT(v time.Time) predicate.Groups {
	return predicate.Groups(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldGCreatedAt), v))
	})
}

// GCreatedAtLTE applies the LTE predicate on the "g_created_at" field.
func GCreatedAtLTE(v time.Time) predicate.Groups {
	return predicate.Groups(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldGCreatedAt), v))
	})
}

// GCreatedAtIsNil applies the IsNil predicate on the "g_created_at" field.
func GCreatedAtIsNil() predicate.Groups {
	return predicate.Groups(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldGCreatedAt)))
	})
}

// GCreatedAtNotNil applies the NotNil predicate on the "g_created_at" field.
func GCreatedAtNotNil() predicate.Groups {
	return predicate.Groups(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldGCreatedAt)))
	})
}

// HasUseBandwidth applies the HasEdge predicate on the "use_bandwidth" edge.
func HasUseBandwidth() predicate.Groups {
	return predicate.Groups(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UseBandwidthTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UseBandwidthTable, UseBandwidthColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUseBandwidthWith applies the HasEdge predicate on the "use_bandwidth" edge with a given conditions (other predicates).
func HasUseBandwidthWith(preds ...predicate.GroupBandwidth) predicate.Groups {
	return predicate.Groups(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UseBandwidthInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UseBandwidthTable, UseBandwidthColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUsers applies the HasEdge predicate on the "users" edge.
func HasUsers() predicate.Groups {
	return predicate.Groups(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UsersTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, UsersTable, UsersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUsersWith applies the HasEdge predicate on the "users" edge with a given conditions (other predicates).
func HasUsersWith(preds ...predicate.Users) predicate.Groups {
	return predicate.Groups(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UsersInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, UsersTable, UsersColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Groups) predicate.Groups {
	return predicate.Groups(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Groups) predicate.Groups {
	return predicate.Groups(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Groups) predicate.Groups {
	return predicate.Groups(func(s *sql.Selector) {
		p(s.Not())
	})
}
