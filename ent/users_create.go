// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/mrzack99s/mrz-identity-management/ent/groups"
	"github.com/mrzack99s/mrz-identity-management/ent/users"
)

// UsersCreate is the builder for creating a Users entity.
type UsersCreate struct {
	config
	mutation *UsersMutation
	hooks    []Hook
}

// SetUPid sets the "u_pid" field.
func (uc *UsersCreate) SetUPid(s string) *UsersCreate {
	uc.mutation.SetUPid(s)
	return uc
}

// SetUOrgid sets the "u_orgid" field.
func (uc *UsersCreate) SetUOrgid(s string) *UsersCreate {
	uc.mutation.SetUOrgid(s)
	return uc
}

// SetUFirstName sets the "u_first_name" field.
func (uc *UsersCreate) SetUFirstName(s string) *UsersCreate {
	uc.mutation.SetUFirstName(s)
	return uc
}

// SetULastName sets the "u_last_name" field.
func (uc *UsersCreate) SetULastName(s string) *UsersCreate {
	uc.mutation.SetULastName(s)
	return uc
}

// SetUIsActive sets the "u_is_active" field.
func (uc *UsersCreate) SetUIsActive(b bool) *UsersCreate {
	uc.mutation.SetUIsActive(b)
	return uc
}

// SetNillableUIsActive sets the "u_is_active" field if the given value is not nil.
func (uc *UsersCreate) SetNillableUIsActive(b *bool) *UsersCreate {
	if b != nil {
		uc.SetUIsActive(*b)
	}
	return uc
}

// SetUCreatedAt sets the "u_created_at" field.
func (uc *UsersCreate) SetUCreatedAt(t time.Time) *UsersCreate {
	uc.mutation.SetUCreatedAt(t)
	return uc
}

// SetNillableUCreatedAt sets the "u_created_at" field if the given value is not nil.
func (uc *UsersCreate) SetNillableUCreatedAt(t *time.Time) *UsersCreate {
	if t != nil {
		uc.SetUCreatedAt(*t)
	}
	return uc
}

// SetUPasswordUpdatedAt sets the "u_password_updated_at" field.
func (uc *UsersCreate) SetUPasswordUpdatedAt(t time.Time) *UsersCreate {
	uc.mutation.SetUPasswordUpdatedAt(t)
	return uc
}

// SetNillableUPasswordUpdatedAt sets the "u_password_updated_at" field if the given value is not nil.
func (uc *UsersCreate) SetNillableUPasswordUpdatedAt(t *time.Time) *UsersCreate {
	if t != nil {
		uc.SetUPasswordUpdatedAt(*t)
	}
	return uc
}

// SetUExpiredAt sets the "u_expired_at" field.
func (uc *UsersCreate) SetUExpiredAt(t time.Time) *UsersCreate {
	uc.mutation.SetUExpiredAt(t)
	return uc
}

// SetNillableUExpiredAt sets the "u_expired_at" field if the given value is not nil.
func (uc *UsersCreate) SetNillableUExpiredAt(t *time.Time) *UsersCreate {
	if t != nil {
		uc.SetUExpiredAt(*t)
	}
	return uc
}

// SetInGroupID sets the "in_group" edge to the Groups entity by ID.
func (uc *UsersCreate) SetInGroupID(id int) *UsersCreate {
	uc.mutation.SetInGroupID(id)
	return uc
}

// SetNillableInGroupID sets the "in_group" edge to the Groups entity by ID if the given value is not nil.
func (uc *UsersCreate) SetNillableInGroupID(id *int) *UsersCreate {
	if id != nil {
		uc = uc.SetInGroupID(*id)
	}
	return uc
}

// SetInGroup sets the "in_group" edge to the Groups entity.
func (uc *UsersCreate) SetInGroup(g *Groups) *UsersCreate {
	return uc.SetInGroupID(g.ID)
}

// Mutation returns the UsersMutation object of the builder.
func (uc *UsersCreate) Mutation() *UsersMutation {
	return uc.mutation
}

// Save creates the Users in the database.
func (uc *UsersCreate) Save(ctx context.Context) (*Users, error) {
	var (
		err  error
		node *Users
	)
	uc.defaults()
	if len(uc.hooks) == 0 {
		if err = uc.check(); err != nil {
			return nil, err
		}
		node, err = uc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UsersMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = uc.check(); err != nil {
				return nil, err
			}
			uc.mutation = mutation
			if node, err = uc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(uc.hooks) - 1; i >= 0; i-- {
			if uc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = uc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, uc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (uc *UsersCreate) SaveX(ctx context.Context) *Users {
	v, err := uc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uc *UsersCreate) Exec(ctx context.Context) error {
	_, err := uc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uc *UsersCreate) ExecX(ctx context.Context) {
	if err := uc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uc *UsersCreate) defaults() {
	if _, ok := uc.mutation.UIsActive(); !ok {
		v := users.DefaultUIsActive
		uc.mutation.SetUIsActive(v)
	}
	if _, ok := uc.mutation.UCreatedAt(); !ok {
		v := users.DefaultUCreatedAt()
		uc.mutation.SetUCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uc *UsersCreate) check() error {
	if _, ok := uc.mutation.UPid(); !ok {
		return &ValidationError{Name: "u_pid", err: errors.New(`ent: missing required field "u_pid"`)}
	}
	if v, ok := uc.mutation.UPid(); ok {
		if err := users.UPidValidator(v); err != nil {
			return &ValidationError{Name: "u_pid", err: fmt.Errorf(`ent: validator failed for field "u_pid": %w`, err)}
		}
	}
	if _, ok := uc.mutation.UOrgid(); !ok {
		return &ValidationError{Name: "u_orgid", err: errors.New(`ent: missing required field "u_orgid"`)}
	}
	if v, ok := uc.mutation.UOrgid(); ok {
		if err := users.UOrgidValidator(v); err != nil {
			return &ValidationError{Name: "u_orgid", err: fmt.Errorf(`ent: validator failed for field "u_orgid": %w`, err)}
		}
	}
	if _, ok := uc.mutation.UFirstName(); !ok {
		return &ValidationError{Name: "u_first_name", err: errors.New(`ent: missing required field "u_first_name"`)}
	}
	if v, ok := uc.mutation.UFirstName(); ok {
		if err := users.UFirstNameValidator(v); err != nil {
			return &ValidationError{Name: "u_first_name", err: fmt.Errorf(`ent: validator failed for field "u_first_name": %w`, err)}
		}
	}
	if _, ok := uc.mutation.ULastName(); !ok {
		return &ValidationError{Name: "u_last_name", err: errors.New(`ent: missing required field "u_last_name"`)}
	}
	if v, ok := uc.mutation.ULastName(); ok {
		if err := users.ULastNameValidator(v); err != nil {
			return &ValidationError{Name: "u_last_name", err: fmt.Errorf(`ent: validator failed for field "u_last_name": %w`, err)}
		}
	}
	if _, ok := uc.mutation.UIsActive(); !ok {
		return &ValidationError{Name: "u_is_active", err: errors.New(`ent: missing required field "u_is_active"`)}
	}
	return nil
}

func (uc *UsersCreate) sqlSave(ctx context.Context) (*Users, error) {
	_node, _spec := uc.createSpec()
	if err := sqlgraph.CreateNode(ctx, uc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (uc *UsersCreate) createSpec() (*Users, *sqlgraph.CreateSpec) {
	var (
		_node = &Users{config: uc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: users.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: users.FieldID,
			},
		}
	)
	if value, ok := uc.mutation.UPid(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: users.FieldUPid,
		})
		_node.UPid = value
	}
	if value, ok := uc.mutation.UOrgid(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: users.FieldUOrgid,
		})
		_node.UOrgid = value
	}
	if value, ok := uc.mutation.UFirstName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: users.FieldUFirstName,
		})
		_node.UFirstName = value
	}
	if value, ok := uc.mutation.ULastName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: users.FieldULastName,
		})
		_node.ULastName = value
	}
	if value, ok := uc.mutation.UIsActive(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: users.FieldUIsActive,
		})
		_node.UIsActive = value
	}
	if value, ok := uc.mutation.UCreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: users.FieldUCreatedAt,
		})
		_node.UCreatedAt = value
	}
	if value, ok := uc.mutation.UPasswordUpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: users.FieldUPasswordUpdatedAt,
		})
		_node.UPasswordUpdatedAt = value
	}
	if value, ok := uc.mutation.UExpiredAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: users.FieldUExpiredAt,
		})
		_node.UExpiredAt = value
	}
	if nodes := uc.mutation.InGroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   users.InGroupTable,
			Columns: []string{users.InGroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: groups.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.groups_users = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// UsersCreateBulk is the builder for creating many Users entities in bulk.
type UsersCreateBulk struct {
	config
	builders []*UsersCreate
}

// Save creates the Users entities in the database.
func (ucb *UsersCreateBulk) Save(ctx context.Context) ([]*Users, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ucb.builders))
	nodes := make([]*Users, len(ucb.builders))
	mutators := make([]Mutator, len(ucb.builders))
	for i := range ucb.builders {
		func(i int, root context.Context) {
			builder := ucb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UsersMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ucb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ucb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ucb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ucb *UsersCreateBulk) SaveX(ctx context.Context) []*Users {
	v, err := ucb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ucb *UsersCreateBulk) Exec(ctx context.Context) error {
	_, err := ucb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ucb *UsersCreateBulk) ExecX(ctx context.Context) {
	if err := ucb.Exec(ctx); err != nil {
		panic(err)
	}
}
