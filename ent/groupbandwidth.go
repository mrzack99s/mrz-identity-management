// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/mrzack99s/mrz-identity-management/ent/groupbandwidth"
)

// GroupBandwidth is the model entity for the GroupBandwidth schema.
type GroupBandwidth struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// GbwDownloadSpeed holds the value of the "gbw_download_speed" field.
	GbwDownloadSpeed int `json:"gbw_download_speed,omitempty"`
	// GbwUploadSpeed holds the value of the "gbw_upload_speed" field.
	GbwUploadSpeed int `json:"gbw_upload_speed,omitempty"`
	// GbwCreatedAt holds the value of the "gbw_created_at" field.
	GbwCreatedAt time.Time `json:"gbw_created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the GroupBandwidthQuery when eager-loading is set.
	Edges GroupBandwidthEdges `json:"edges"`
}

// GroupBandwidthEdges holds the relations/edges for other nodes in the graph.
type GroupBandwidthEdges struct {
	// Groups holds the value of the groups edge.
	Groups []*Groups `json:"groups,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// GroupsOrErr returns the Groups value or an error if the edge
// was not loaded in eager-loading.
func (e GroupBandwidthEdges) GroupsOrErr() ([]*Groups, error) {
	if e.loadedTypes[0] {
		return e.Groups, nil
	}
	return nil, &NotLoadedError{edge: "groups"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*GroupBandwidth) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case groupbandwidth.FieldID, groupbandwidth.FieldGbwDownloadSpeed, groupbandwidth.FieldGbwUploadSpeed:
			values[i] = new(sql.NullInt64)
		case groupbandwidth.FieldGbwCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type GroupBandwidth", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the GroupBandwidth fields.
func (gb *GroupBandwidth) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case groupbandwidth.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			gb.ID = int(value.Int64)
		case groupbandwidth.FieldGbwDownloadSpeed:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field gbw_download_speed", values[i])
			} else if value.Valid {
				gb.GbwDownloadSpeed = int(value.Int64)
			}
		case groupbandwidth.FieldGbwUploadSpeed:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field gbw_upload_speed", values[i])
			} else if value.Valid {
				gb.GbwUploadSpeed = int(value.Int64)
			}
		case groupbandwidth.FieldGbwCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field gbw_created_at", values[i])
			} else if value.Valid {
				gb.GbwCreatedAt = value.Time
			}
		}
	}
	return nil
}

// QueryGroups queries the "groups" edge of the GroupBandwidth entity.
func (gb *GroupBandwidth) QueryGroups() *GroupsQuery {
	return (&GroupBandwidthClient{config: gb.config}).QueryGroups(gb)
}

// Update returns a builder for updating this GroupBandwidth.
// Note that you need to call GroupBandwidth.Unwrap() before calling this method if this GroupBandwidth
// was returned from a transaction, and the transaction was committed or rolled back.
func (gb *GroupBandwidth) Update() *GroupBandwidthUpdateOne {
	return (&GroupBandwidthClient{config: gb.config}).UpdateOne(gb)
}

// Unwrap unwraps the GroupBandwidth entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (gb *GroupBandwidth) Unwrap() *GroupBandwidth {
	tx, ok := gb.config.driver.(*txDriver)
	if !ok {
		panic("ent: GroupBandwidth is not a transactional entity")
	}
	gb.config.driver = tx.drv
	return gb
}

// String implements the fmt.Stringer.
func (gb *GroupBandwidth) String() string {
	var builder strings.Builder
	builder.WriteString("GroupBandwidth(")
	builder.WriteString(fmt.Sprintf("id=%v", gb.ID))
	builder.WriteString(", gbw_download_speed=")
	builder.WriteString(fmt.Sprintf("%v", gb.GbwDownloadSpeed))
	builder.WriteString(", gbw_upload_speed=")
	builder.WriteString(fmt.Sprintf("%v", gb.GbwUploadSpeed))
	builder.WriteString(", gbw_created_at=")
	builder.WriteString(gb.GbwCreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// GroupBandwidths is a parsable slice of GroupBandwidth.
type GroupBandwidths []*GroupBandwidth

func (gb GroupBandwidths) config(cfg config) {
	for _i := range gb {
		gb[_i].config = cfg
	}
}
