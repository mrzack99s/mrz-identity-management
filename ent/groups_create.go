// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/mrzack99s/mrz-identity-management/ent/groupbandwidth"
	"github.com/mrzack99s/mrz-identity-management/ent/groups"
	"github.com/mrzack99s/mrz-identity-management/ent/users"
)

// GroupsCreate is the builder for creating a Groups entity.
type GroupsCreate struct {
	config
	mutation *GroupsMutation
	hooks    []Hook
}

// SetGName sets the "g_name" field.
func (gc *GroupsCreate) SetGName(s string) *GroupsCreate {
	gc.mutation.SetGName(s)
	return gc
}

// SetGIsIntOrg sets the "g_is_int_org" field.
func (gc *GroupsCreate) SetGIsIntOrg(b bool) *GroupsCreate {
	gc.mutation.SetGIsIntOrg(b)
	return gc
}

// SetNillableGIsIntOrg sets the "g_is_int_org" field if the given value is not nil.
func (gc *GroupsCreate) SetNillableGIsIntOrg(b *bool) *GroupsCreate {
	if b != nil {
		gc.SetGIsIntOrg(*b)
	}
	return gc
}

// SetGIsSuperAdmin sets the "g_is_super_admin" field.
func (gc *GroupsCreate) SetGIsSuperAdmin(b bool) *GroupsCreate {
	gc.mutation.SetGIsSuperAdmin(b)
	return gc
}

// SetNillableGIsSuperAdmin sets the "g_is_super_admin" field if the given value is not nil.
func (gc *GroupsCreate) SetNillableGIsSuperAdmin(b *bool) *GroupsCreate {
	if b != nil {
		gc.SetGIsSuperAdmin(*b)
	}
	return gc
}

// SetGCreatedAt sets the "g_created_at" field.
func (gc *GroupsCreate) SetGCreatedAt(t time.Time) *GroupsCreate {
	gc.mutation.SetGCreatedAt(t)
	return gc
}

// SetNillableGCreatedAt sets the "g_created_at" field if the given value is not nil.
func (gc *GroupsCreate) SetNillableGCreatedAt(t *time.Time) *GroupsCreate {
	if t != nil {
		gc.SetGCreatedAt(*t)
	}
	return gc
}

// SetUseBandwidthID sets the "use_bandwidth" edge to the GroupBandwidth entity by ID.
func (gc *GroupsCreate) SetUseBandwidthID(id int) *GroupsCreate {
	gc.mutation.SetUseBandwidthID(id)
	return gc
}

// SetNillableUseBandwidthID sets the "use_bandwidth" edge to the GroupBandwidth entity by ID if the given value is not nil.
func (gc *GroupsCreate) SetNillableUseBandwidthID(id *int) *GroupsCreate {
	if id != nil {
		gc = gc.SetUseBandwidthID(*id)
	}
	return gc
}

// SetUseBandwidth sets the "use_bandwidth" edge to the GroupBandwidth entity.
func (gc *GroupsCreate) SetUseBandwidth(g *GroupBandwidth) *GroupsCreate {
	return gc.SetUseBandwidthID(g.ID)
}

// AddUserIDs adds the "users" edge to the Users entity by IDs.
func (gc *GroupsCreate) AddUserIDs(ids ...int) *GroupsCreate {
	gc.mutation.AddUserIDs(ids...)
	return gc
}

// AddUsers adds the "users" edges to the Users entity.
func (gc *GroupsCreate) AddUsers(u ...*Users) *GroupsCreate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return gc.AddUserIDs(ids...)
}

// Mutation returns the GroupsMutation object of the builder.
func (gc *GroupsCreate) Mutation() *GroupsMutation {
	return gc.mutation
}

// Save creates the Groups in the database.
func (gc *GroupsCreate) Save(ctx context.Context) (*Groups, error) {
	var (
		err  error
		node *Groups
	)
	gc.defaults()
	if len(gc.hooks) == 0 {
		if err = gc.check(); err != nil {
			return nil, err
		}
		node, err = gc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GroupsMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = gc.check(); err != nil {
				return nil, err
			}
			gc.mutation = mutation
			if node, err = gc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(gc.hooks) - 1; i >= 0; i-- {
			if gc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = gc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, gc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (gc *GroupsCreate) SaveX(ctx context.Context) *Groups {
	v, err := gc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gc *GroupsCreate) Exec(ctx context.Context) error {
	_, err := gc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gc *GroupsCreate) ExecX(ctx context.Context) {
	if err := gc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gc *GroupsCreate) defaults() {
	if _, ok := gc.mutation.GIsIntOrg(); !ok {
		v := groups.DefaultGIsIntOrg
		gc.mutation.SetGIsIntOrg(v)
	}
	if _, ok := gc.mutation.GIsSuperAdmin(); !ok {
		v := groups.DefaultGIsSuperAdmin
		gc.mutation.SetGIsSuperAdmin(v)
	}
	if _, ok := gc.mutation.GCreatedAt(); !ok {
		v := groups.DefaultGCreatedAt()
		gc.mutation.SetGCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gc *GroupsCreate) check() error {
	if _, ok := gc.mutation.GName(); !ok {
		return &ValidationError{Name: "g_name", err: errors.New(`ent: missing required field "g_name"`)}
	}
	if v, ok := gc.mutation.GName(); ok {
		if err := groups.GNameValidator(v); err != nil {
			return &ValidationError{Name: "g_name", err: fmt.Errorf(`ent: validator failed for field "g_name": %w`, err)}
		}
	}
	if _, ok := gc.mutation.GIsIntOrg(); !ok {
		return &ValidationError{Name: "g_is_int_org", err: errors.New(`ent: missing required field "g_is_int_org"`)}
	}
	if _, ok := gc.mutation.GIsSuperAdmin(); !ok {
		return &ValidationError{Name: "g_is_super_admin", err: errors.New(`ent: missing required field "g_is_super_admin"`)}
	}
	return nil
}

func (gc *GroupsCreate) sqlSave(ctx context.Context) (*Groups, error) {
	_node, _spec := gc.createSpec()
	if err := sqlgraph.CreateNode(ctx, gc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (gc *GroupsCreate) createSpec() (*Groups, *sqlgraph.CreateSpec) {
	var (
		_node = &Groups{config: gc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: groups.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: groups.FieldID,
			},
		}
	)
	if value, ok := gc.mutation.GName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: groups.FieldGName,
		})
		_node.GName = value
	}
	if value, ok := gc.mutation.GIsIntOrg(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: groups.FieldGIsIntOrg,
		})
		_node.GIsIntOrg = value
	}
	if value, ok := gc.mutation.GIsSuperAdmin(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: groups.FieldGIsSuperAdmin,
		})
		_node.GIsSuperAdmin = value
	}
	if value, ok := gc.mutation.GCreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: groups.FieldGCreatedAt,
		})
		_node.GCreatedAt = value
	}
	if nodes := gc.mutation.UseBandwidthIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   groups.UseBandwidthTable,
			Columns: []string{groups.UseBandwidthColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: groupbandwidth.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.group_bandwidth_groups = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := gc.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   groups.UsersTable,
			Columns: []string{groups.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: users.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// GroupsCreateBulk is the builder for creating many Groups entities in bulk.
type GroupsCreateBulk struct {
	config
	builders []*GroupsCreate
}

// Save creates the Groups entities in the database.
func (gcb *GroupsCreateBulk) Save(ctx context.Context) ([]*Groups, error) {
	specs := make([]*sqlgraph.CreateSpec, len(gcb.builders))
	nodes := make([]*Groups, len(gcb.builders))
	mutators := make([]Mutator, len(gcb.builders))
	for i := range gcb.builders {
		func(i int, root context.Context) {
			builder := gcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*GroupsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, gcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, gcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, gcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (gcb *GroupsCreateBulk) SaveX(ctx context.Context) []*Groups {
	v, err := gcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gcb *GroupsCreateBulk) Exec(ctx context.Context) error {
	_, err := gcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gcb *GroupsCreateBulk) ExecX(ctx context.Context) {
	if err := gcb.Exec(ctx); err != nil {
		panic(err)
	}
}
